/*
 * generated by Xtext
 */
grammar DebugInternalRoverDSL ;

// Rule Robot
ruleRobot :
	'Behaviors:' ruleBehaviorName+ (
		'Variables:' ruleGlobal*
	)? (
		'Constants:' ruleStatic*
	)? 'Stops when:' ruleValueExpression ruleImplementation+ ruleSubRoutine*
;

// Rule BehaviorName
ruleBehaviorName :
	RULE_ID
;

// Rule Motor
ruleMotor :
	ruleEMotor
;

// Rule Global
ruleGlobal :
	RULE_ID
;

// Rule Static
ruleStatic :
	RULE_ID ' = ' ruleValueExpression ';'
;

// Rule Implementation
ruleImplementation :
	'Implementation for' RULE_ID ':' 'Takes control when:' ruleValueExpression
	'Does:' ruleExpression+
;

// Rule SubRoutine
ruleSubRoutine :
	'Routine ' RULE_ID ':' ruleExpression+
;

// Rule Expression
ruleExpression :
	(
		ruleValExpr |
		ruleAction |
		ruleAssignExpression
	) ';' |
	ruleIFExpression |
	ruleWHILEExpression
;

// Rule ValExpr
ruleValExpr :
	ruleValueExpression
;

// Rule IFExpression
ruleIFExpression :
	'IF' ruleValueExpression '{' ruleExpression+ '}' (
		'ELSE' '{' ruleExpression+ '}'
	)?
;

// Rule WHILEExpression
ruleWHILEExpression :
	'WHILE' ruleValueExpression '{' ruleExpression+ '}'
;

// Rule AssignExpression
ruleAssignExpression :
	RULE_ID ' = ' ruleValueExpression
;

// Rule Action
ruleAction :
	ruleForwardAction |
	ruleRotateAction |
	ruleStopAction |
	ruleSAccelerationAction |
	ruleSSpeedAction |
	ruleSubRoutineAction |
	ruleMeasureAction
;

// Rule ForwardAction
ruleForwardAction :
	'Forward' ruleMotor?
;

// Rule RotateAction
ruleRotateAction :
	'Rotate' ruleMotor ruleValueExpression 'wait'?
;

// Rule StopAction
ruleStopAction :
	'Stop' ruleMotor?
;

// Rule SAccelerationAction
ruleSAccelerationAction :
	'Set Acceleration' ruleMotor? ruleValueExpression
;

// Rule SSpeedAction
ruleSSpeedAction :
	'Set Speed' ruleMotor? ruleValueExpression
;

// Rule SubRoutineAction
ruleSubRoutineAction :
	'Do' RULE_ID
;

// Rule MeasureAction
ruleMeasureAction :
	'Measure'
;

// Rule ValueExpression
ruleValueExpression :
	ruleBlevel1
;

// Rule Blevel1
ruleBlevel1 :
	ruleBlevel2 (
		ruleBBinaryOp ruleBlevel2
	)*
;

// Rule Blevel2
ruleBlevel2 :
	ruleBNotExpr |
	ruleBlevel3
;

// Rule BNotExpr
ruleBNotExpr :
	'NOT' ruleBlevel3
;

// Rule Blevel3
ruleBlevel3 :
	ruleBlevel4 (
		ruleCompareOp ruleBlevel4
	)*
;

// Rule Blevel4
ruleBlevel4 :
	ruleBVLiteral |
	ruleBBLiteral |
	ruleBVarLiteral |
	ruleBSensorLiteral |
	ruleBVBracket
;

// Rule BVLiteral
ruleBVLiteral :
	'neg'? RULE_INT
;

// Rule BBLiteral
ruleBBLiteral :
	RULE_BOOL_LITERAL
;

// Rule BVarLiteral
ruleBVarLiteral :
	RULE_ID
;

// Rule BSensorLiteral
ruleBSensorLiteral :
	ruleSensor
;

// Rule BVBracket
ruleBVBracket :
	'(' ruleValueExpression ')'
;

// Rule Sensor
ruleSensor :
	'ColorID' |
	'LeftLight' |
	'RightLight' |
	'FrontUS' |
	'RearUS' |
	'LeftTouch' |
	'RightTouch' |
	'Angle'
;

// Rule EMotor
ruleEMotor :
	'LeftMotor' |
	'RightMotor'
;

// Rule BBinaryOp
ruleBBinaryOp :
	'&&' |
	'||'
;

// Rule CompareOp
ruleCompareOp :
	'==' |
	'!=' |
	'>=' |
	'>' |
	'<=' |
	'<'
;

RULE_ALPHA :
	'A' .. 'Z'
;

RULE_BOOL_LITERAL :
	'True' |
	'False' |
	'TRUE' |
	'FALSE'
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' . |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' . |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' {skip();}
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? {skip();}
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ {skip();}
;

RULE_ANY_OTHER :
	.
;