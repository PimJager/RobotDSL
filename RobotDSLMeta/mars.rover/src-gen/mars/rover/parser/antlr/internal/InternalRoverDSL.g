/*
 * generated by Xtext
 */
grammar InternalRoverDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package mars.rover.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mars.rover.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mars.rover.services.RoverDSLGrammarAccess;

}

@parser::members {

 	private RoverDSLGrammarAccess grammarAccess;
 	
    public InternalRoverDSLParser(TokenStream input, RoverDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Robot";	
   	}
   	
   	@Override
   	protected RoverDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	 iv_ruleRobot=ruleRobot 
	 { $current=$iv_ruleRobot.current; } 
	 EOF 
;

// Rule Robot
ruleRobot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Behaviors:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRobotAccess().getBehaviorsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRobotAccess().getBehaviorOrderBehaviorNameParserRuleCall_1_0()); 
	    }
		lv_behaviorOrder_1_0=ruleBehaviorName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRobotRule());
	        }
       		add(
       			$current, 
       			"behaviorOrder",
        		lv_behaviorOrder_1_0, 
        		"BehaviorName");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_2='Variables:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getVariablesKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRobotAccess().getGlobalsGlobalParserRuleCall_2_1_0()); 
	    }
		lv_globals_3_0=ruleGlobal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRobotRule());
	        }
       		add(
       			$current, 
       			"globals",
        		lv_globals_3_0, 
        		"Global");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_4='Constants:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRobotAccess().getConstantsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRobotAccess().getStaticsStaticParserRuleCall_3_1_0()); 
	    }
		lv_statics_5_0=ruleStatic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRobotRule());
	        }
       		add(
       			$current, 
       			"statics",
        		lv_statics_5_0, 
        		"Static");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_6='Stops when:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRobotAccess().getStopsWhenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRobotAccess().getStopBehaviourValueExpressionParserRuleCall_5_0()); 
	    }
		lv_stopBehaviour_7_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRobotRule());
	        }
       		set(
       			$current, 
       			"stopBehaviour",
        		lv_stopBehaviour_7_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRobotAccess().getBehaviorsImplementationParserRuleCall_6_0()); 
	    }
		lv_behaviors_8_0=ruleImplementation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRobotRule());
	        }
       		add(
       			$current, 
       			"behaviors",
        		lv_behaviors_8_0, 
        		"Implementation");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getRobotAccess().getSubRoutinesSubRoutineParserRuleCall_7_0()); 
	    }
		lv_subRoutines_9_0=ruleSubRoutine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRobotRule());
	        }
       		add(
       			$current, 
       			"subRoutines",
        		lv_subRoutines_9_0, 
        		"SubRoutine");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBehaviorName
entryRuleBehaviorName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorNameRule()); }
	 iv_ruleBehaviorName=ruleBehaviorName 
	 { $current=$iv_ruleBehaviorName.current; } 
	 EOF 
;

// Rule BehaviorName
ruleBehaviorName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBehaviorNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleMotor
entryRuleMotor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMotorRule()); }
	 iv_ruleMotor=ruleMotor 
	 { $current=$iv_ruleMotor.current; } 
	 EOF 
;

// Rule Motor
ruleMotor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMotorAccess().getMEMotorEnumRuleCall_0()); 
	    }
		lv_m_0_0=ruleEMotor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMotorRule());
	        }
       		set(
       			$current, 
       			"m",
        		lv_m_0_0, 
        		"EMotor");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleGlobal
entryRuleGlobal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalRule()); }
	 iv_ruleGlobal=ruleGlobal 
	 { $current=$iv_ruleGlobal.current; } 
	 EOF 
;

// Rule Global
ruleGlobal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getGlobalAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGlobalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleStatic
entryRuleStatic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticRule()); }
	 iv_ruleStatic=ruleStatic 
	 { $current=$iv_ruleStatic.current; } 
	 EOF 
;

// Rule Static
ruleStatic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStaticAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStaticRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=' = ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStaticAccess().getSpaceEqualsSignSpaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticAccess().getValueValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStaticAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleImplementation
entryRuleImplementation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplementationRule()); }
	 iv_ruleImplementation=ruleImplementation 
	 { $current=$iv_ruleImplementation.current; } 
	 EOF 
;

// Rule Implementation
ruleImplementation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Implementation for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImplementationAccess().getImplementationForKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImplementationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getImplementationAccess().getForBehaviorNameCrossReference_1_0()); 
	}

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplementationAccess().getColonKeyword_2());
    }
	otherlv_3='Takes control when:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImplementationAccess().getTakesControlWhenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementationAccess().getControlCheckValueExpressionParserRuleCall_4_0()); 
	    }
		lv_controlCheck_4_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementationRule());
	        }
       		set(
       			$current, 
       			"controlCheck",
        		lv_controlCheck_4_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='Does:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getImplementationAccess().getDoesKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplementationAccess().getExpressionsExpressionParserRuleCall_6_0()); 
	    }
		lv_expressions_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplementationRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleSubRoutine
entryRuleSubRoutine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubRoutineRule()); }
	 iv_ruleSubRoutine=ruleSubRoutine 
	 { $current=$iv_ruleSubRoutine.current; } 
	 EOF 
;

// Rule SubRoutine
ruleSubRoutine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Routine ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubRoutineAccess().getRoutineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSubRoutineAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubRoutineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubRoutineAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubRoutineAccess().getExpressionsExpressionParserRuleCall_3_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubRoutineRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getValExprParserRuleCall_0_0_0()); 
    }
    this_ValExpr_0=ruleValExpr
    { 
        $current = $this_ValExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getActionParserRuleCall_0_0_1()); 
    }
    this_Action_1=ruleAction
    { 
        $current = $this_Action_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignExpressionParserRuleCall_0_0_2()); 
    }
    this_AssignExpression_2=ruleAssignExpression
    { 
        $current = $this_AssignExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getSemicolonKeyword_0_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIFExpressionParserRuleCall_1()); 
    }
    this_IFExpression_4=ruleIFExpression
    { 
        $current = $this_IFExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getWHILEExpressionParserRuleCall_2()); 
    }
    this_WHILEExpression_5=ruleWHILEExpression
    { 
        $current = $this_WHILEExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValExpr
entryRuleValExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValExprRule()); }
	 iv_ruleValExpr=ruleValExpr 
	 { $current=$iv_ruleValExpr.current; } 
	 EOF 
;

// Rule ValExpr
ruleValExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValExprAccess().getVExprValueExpressionParserRuleCall_0()); 
	    }
		lv_vExpr_0_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValExprRule());
	        }
       		set(
       			$current, 
       			"vExpr",
        		lv_vExpr_0_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIFExpression
entryRuleIFExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIFExpressionRule()); }
	 iv_ruleIFExpression=ruleIFExpression 
	 { $current=$iv_ruleIFExpression.current; } 
	 EOF 
;

// Rule IFExpression
ruleIFExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIFExpressionAccess().getIFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIFExpressionAccess().getCValueExpressionParserRuleCall_1_0()); 
	    }
		lv_c_1_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIFExpressionRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_1_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIFExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIFExpressionAccess().getTExpressionParserRuleCall_3_0()); 
	    }
		lv_t_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIFExpressionRule());
	        }
       		add(
       			$current, 
       			"t",
        		lv_t_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIFExpressionAccess().getRightCurlyBracketKeyword_4());
    }
(	otherlv_5='ELSE' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIFExpressionAccess().getELSEKeyword_5_0());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIFExpressionAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIFExpressionAccess().getEExpressionParserRuleCall_5_2_0()); 
	    }
		lv_e_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIFExpressionRule());
	        }
       		add(
       			$current, 
       			"e",
        		lv_e_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIFExpressionAccess().getRightCurlyBracketKeyword_5_3());
    }
)?)
;





// Entry rule entryRuleWHILEExpression
entryRuleWHILEExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWHILEExpressionRule()); }
	 iv_ruleWHILEExpression=ruleWHILEExpression 
	 { $current=$iv_ruleWHILEExpression.current; } 
	 EOF 
;

// Rule WHILEExpression
ruleWHILEExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='WHILE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWHILEExpressionAccess().getWHILEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWHILEExpressionAccess().getCValueExpressionParserRuleCall_1_0()); 
	    }
		lv_c_1_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWHILEExpressionRule());
	        }
       		set(
       			$current, 
       			"c",
        		lv_c_1_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWHILEExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWHILEExpressionAccess().getBExpressionParserRuleCall_3_0()); 
	    }
		lv_b_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWHILEExpressionRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWHILEExpressionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAssignExpression
entryRuleAssignExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignExpressionRule()); }
	 iv_ruleAssignExpression=ruleAssignExpression 
	 { $current=$iv_ruleAssignExpression.current; } 
	 EOF 
;

// Rule AssignExpression
ruleAssignExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignExpressionAccess().getGlobalGlobalCrossReference_0_0()); 
	}

)
)	otherlv_1=' = ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignExpressionAccess().getSpaceEqualsSignSpaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignExpressionAccess().getVValueExpressionParserRuleCall_2_0()); 
	    }
		lv_v_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignExpressionRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAccess().getForwardActionParserRuleCall_0()); 
    }
    this_ForwardAction_0=ruleForwardAction
    { 
        $current = $this_ForwardAction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getRotateActionParserRuleCall_1()); 
    }
    this_RotateAction_1=ruleRotateAction
    { 
        $current = $this_RotateAction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getStopActionParserRuleCall_2()); 
    }
    this_StopAction_2=ruleStopAction
    { 
        $current = $this_StopAction_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getSAccelerationActionParserRuleCall_3()); 
    }
    this_SAccelerationAction_3=ruleSAccelerationAction
    { 
        $current = $this_SAccelerationAction_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getSSpeedActionParserRuleCall_4()); 
    }
    this_SSpeedAction_4=ruleSSpeedAction
    { 
        $current = $this_SSpeedAction_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getSubRoutineActionParserRuleCall_5()); 
    }
    this_SubRoutineAction_5=ruleSubRoutineAction
    { 
        $current = $this_SubRoutineAction_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForwardAction
entryRuleForwardAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForwardActionRule()); }
	 iv_ruleForwardAction=ruleForwardAction 
	 { $current=$iv_ruleForwardAction.current; } 
	 EOF 
;

// Rule ForwardAction
ruleForwardAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getForwardActionAccess().getForwardActionAction_0(),
            $current);
    }
)	otherlv_1='Forward' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForwardActionAccess().getForwardKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForwardActionAccess().getMotorMotorParserRuleCall_2_0()); 
	    }
		lv_motor_2_0=ruleMotor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForwardActionRule());
	        }
       		set(
       			$current, 
       			"motor",
        		lv_motor_2_0, 
        		"Motor");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleRotateAction
entryRuleRotateAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRotateActionRule()); }
	 iv_ruleRotateAction=ruleRotateAction 
	 { $current=$iv_ruleRotateAction.current; } 
	 EOF 
;

// Rule RotateAction
ruleRotateAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Rotate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRotateActionAccess().getRotateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRotateActionAccess().getMotorMotorParserRuleCall_1_0()); 
	    }
		lv_motor_1_0=ruleMotor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRotateActionRule());
	        }
       		set(
       			$current, 
       			"motor",
        		lv_motor_1_0, 
        		"Motor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRotateActionAccess().getDegreesValueExpressionParserRuleCall_2_0()); 
	    }
		lv_degrees_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRotateActionRule());
	        }
       		set(
       			$current, 
       			"degrees",
        		lv_degrees_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_blocking_3_0=	'wait' 
    {
        newLeafNode(lv_blocking_3_0, grammarAccess.getRotateActionAccess().getBlockingWaitKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRotateActionRule());
	        }
       		setWithLastConsumed($current, "blocking", true, "wait");
	    }

)
)?)
;





// Entry rule entryRuleStopAction
entryRuleStopAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStopActionRule()); }
	 iv_ruleStopAction=ruleStopAction 
	 { $current=$iv_ruleStopAction.current; } 
	 EOF 
;

// Rule StopAction
ruleStopAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStopActionAccess().getStopActionAction_0(),
            $current);
    }
)	otherlv_1='Stop' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStopActionAccess().getStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStopActionAccess().getMotorMotorParserRuleCall_2_0()); 
	    }
		lv_motor_2_0=ruleMotor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStopActionRule());
	        }
       		set(
       			$current, 
       			"motor",
        		lv_motor_2_0, 
        		"Motor");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSAccelerationAction
entryRuleSAccelerationAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSAccelerationActionRule()); }
	 iv_ruleSAccelerationAction=ruleSAccelerationAction 
	 { $current=$iv_ruleSAccelerationAction.current; } 
	 EOF 
;

// Rule SAccelerationAction
ruleSAccelerationAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Set Acceleration' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSAccelerationActionAccess().getSetAccelerationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSAccelerationActionAccess().getMotorMotorParserRuleCall_1_0()); 
	    }
		lv_motor_1_0=ruleMotor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSAccelerationActionRule());
	        }
       		set(
       			$current, 
       			"motor",
        		lv_motor_1_0, 
        		"Motor");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSAccelerationActionAccess().getVValueExpressionParserRuleCall_2_0()); 
	    }
		lv_v_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSAccelerationActionRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSSpeedAction
entryRuleSSpeedAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSSpeedActionRule()); }
	 iv_ruleSSpeedAction=ruleSSpeedAction 
	 { $current=$iv_ruleSSpeedAction.current; } 
	 EOF 
;

// Rule SSpeedAction
ruleSSpeedAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Set Speed' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSSpeedActionAccess().getSetSpeedKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSSpeedActionAccess().getMotorMotorParserRuleCall_1_0()); 
	    }
		lv_motor_1_0=ruleMotor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSSpeedActionRule());
	        }
       		set(
       			$current, 
       			"motor",
        		lv_motor_1_0, 
        		"Motor");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSSpeedActionAccess().getVValueExpressionParserRuleCall_2_0()); 
	    }
		lv_v_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSSpeedActionRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSubRoutineAction
entryRuleSubRoutineAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubRoutineActionRule()); }
	 iv_ruleSubRoutineAction=ruleSubRoutineAction 
	 { $current=$iv_ruleSubRoutineAction.current; } 
	 EOF 
;

// Rule SubRoutineAction
ruleSubRoutineAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubRoutineActionAccess().getDoKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubRoutineActionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSubRoutineActionAccess().getRoutineSubRoutineCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getValueExpressionAccess().getBlevel1ParserRuleCall()); 
    }
    this_Blevel1_0=ruleBlevel1
    { 
        $current = $this_Blevel1_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBlevel1
entryRuleBlevel1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlevel1Rule()); }
	 iv_ruleBlevel1=ruleBlevel1 
	 { $current=$iv_ruleBlevel1.current; } 
	 EOF 
;

// Rule Blevel1
ruleBlevel1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlevel1Access().getBlevel2ParserRuleCall_0()); 
    }
    this_Blevel2_0=ruleBlevel2
    { 
        $current = $this_Blevel2_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBlevel1Access().getExpressionBinOpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlevel1Access().getBopBBinaryOpEnumRuleCall_1_1_0()); 
	    }
		lv_bop_2_0=ruleBBinaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlevel1Rule());
	        }
       		set(
       			$current, 
       			"bop",
        		lv_bop_2_0, 
        		"BBinaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlevel1Access().getRightBlevel2ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBlevel2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlevel1Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Blevel2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBlevel2
entryRuleBlevel2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlevel2Rule()); }
	 iv_ruleBlevel2=ruleBlevel2 
	 { $current=$iv_ruleBlevel2.current; } 
	 EOF 
;

// Rule Blevel2
ruleBlevel2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlevel2Access().getBNotExprParserRuleCall_0()); 
    }
    this_BNotExpr_0=ruleBNotExpr
    { 
        $current = $this_BNotExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlevel2Access().getBlevel3ParserRuleCall_1()); 
    }
    this_Blevel3_1=ruleBlevel3
    { 
        $current = $this_Blevel3_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBNotExpr
entryRuleBNotExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBNotExprRule()); }
	 iv_ruleBNotExpr=ruleBNotExpr 
	 { $current=$iv_ruleBNotExpr.current; } 
	 EOF 
;

// Rule BNotExpr
ruleBNotExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='NOT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBNotExprAccess().getNOTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBNotExprAccess().getSubBlevel3ParserRuleCall_1_0()); 
	    }
		lv_sub_1_0=ruleBlevel3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBNotExprRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_1_0, 
        		"Blevel3");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlevel3
entryRuleBlevel3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlevel3Rule()); }
	 iv_ruleBlevel3=ruleBlevel3 
	 { $current=$iv_ruleBlevel3.current; } 
	 EOF 
;

// Rule Blevel3
ruleBlevel3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlevel3Access().getBlevel4ParserRuleCall_0()); 
    }
    this_Blevel4_0=ruleBlevel4
    { 
        $current = $this_Blevel4_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBlevel3Access().getExpressionBinCompLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlevel3Access().getBcompCompareOpEnumRuleCall_1_1_0()); 
	    }
		lv_bcomp_2_0=ruleCompareOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlevel3Rule());
	        }
       		set(
       			$current, 
       			"bcomp",
        		lv_bcomp_2_0, 
        		"CompareOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlevel3Access().getRightBlevel4ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBlevel4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlevel3Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Blevel4");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBlevel4
entryRuleBlevel4 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlevel4Rule()); }
	 iv_ruleBlevel4=ruleBlevel4 
	 { $current=$iv_ruleBlevel4.current; } 
	 EOF 
;

// Rule Blevel4
ruleBlevel4 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlevel4Access().getBVLiteralParserRuleCall_0()); 
    }
    this_BVLiteral_0=ruleBVLiteral
    { 
        $current = $this_BVLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlevel4Access().getBBLiteralParserRuleCall_1()); 
    }
    this_BBLiteral_1=ruleBBLiteral
    { 
        $current = $this_BBLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlevel4Access().getBVarLiteralParserRuleCall_2()); 
    }
    this_BVarLiteral_2=ruleBVarLiteral
    { 
        $current = $this_BVarLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlevel4Access().getBSensorLiteralParserRuleCall_3()); 
    }
    this_BSensorLiteral_3=ruleBSensorLiteral
    { 
        $current = $this_BSensorLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlevel4Access().getBVBracketParserRuleCall_4()); 
    }
    this_BVBracket_4=ruleBVBracket
    { 
        $current = $this_BVBracket_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBVLiteral
entryRuleBVLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBVLiteralRule()); }
	 iv_ruleBVLiteral=ruleBVLiteral 
	 { $current=$iv_ruleBVLiteral.current; } 
	 EOF 
;

// Rule BVLiteral
ruleBVLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_neg_0_0=	'neg' 
    {
        newLeafNode(lv_neg_0_0, grammarAccess.getBVLiteralAccess().getNegNegKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBVLiteralRule());
	        }
       		setWithLastConsumed($current, "neg", true, "neg");
	    }

)
)?(
(
		lv_aValue_1_0=RULE_INT
		{
			newLeafNode(lv_aValue_1_0, grammarAccess.getBVLiteralAccess().getAValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBVLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"aValue",
        		lv_aValue_1_0, 
        		"INT");
	    }

)
)(	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBVLiteralAccess().getSolidusKeyword_2_0());
    }
(
(
		lv_fraction_3_0=RULE_INT
		{
			newLeafNode(lv_fraction_3_0, grammarAccess.getBVLiteralAccess().getFractionINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBVLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fraction",
        		lv_fraction_3_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleBBLiteral
entryRuleBBLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBBLiteralRule()); }
	 iv_ruleBBLiteral=ruleBBLiteral 
	 { $current=$iv_ruleBBLiteral.current; } 
	 EOF 
;

// Rule BBLiteral
ruleBBLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_bValue_0_0=RULE_BOOL_LITERAL
		{
			newLeafNode(lv_bValue_0_0, grammarAccess.getBBLiteralAccess().getBValueBOOL_LITERALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBBLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bValue",
        		lv_bValue_0_0, 
        		"BOOL_LITERAL");
	    }

)
)
;





// Entry rule entryRuleBVarLiteral
entryRuleBVarLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBVarLiteralRule()); }
	 iv_ruleBVarLiteral=ruleBVarLiteral 
	 { $current=$iv_ruleBVarLiteral.current; } 
	 EOF 
;

// Rule BVarLiteral
ruleBVarLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_var_0_0=RULE_ID
		{
			newLeafNode(lv_var_0_0, grammarAccess.getBVarLiteralAccess().getVarIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBVarLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleBSensorLiteral
entryRuleBSensorLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBSensorLiteralRule()); }
	 iv_ruleBSensorLiteral=ruleBSensorLiteral 
	 { $current=$iv_ruleBSensorLiteral.current; } 
	 EOF 
;

// Rule BSensorLiteral
ruleBSensorLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBSensorLiteralAccess().getSensorSensorEnumRuleCall_0()); 
	    }
		lv_sensor_0_0=ruleSensor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBSensorLiteralRule());
	        }
       		set(
       			$current, 
       			"sensor",
        		lv_sensor_0_0, 
        		"Sensor");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBVBracket
entryRuleBVBracket returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBVBracketRule()); }
	 iv_ruleBVBracket=ruleBVBracket 
	 { $current=$iv_ruleBVBracket.current; } 
	 EOF 
;

// Rule BVBracket
ruleBVBracket returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBVBracketAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBVBracketAccess().getBsubValueExpressionParserRuleCall_1_0()); 
	    }
		lv_bsub_1_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBVBracketRule());
	        }
       		set(
       			$current, 
       			"bsub",
        		lv_bsub_1_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBVBracketAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule Sensor
ruleSensor returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='ColorIDSensor' 
	{
        $current = grammarAccess.getSensorAccess().getCOLORIDSENSOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSensorAccess().getCOLORIDSENSOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LightSensor' 
	{
        $current = grammarAccess.getSensorAccess().getLIGHTSENSOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSensorAccess().getLIGHTSENSOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='UltraSonicSensor' 
	{
        $current = grammarAccess.getSensorAccess().getULTRASONICSENSOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSensorAccess().getULTRASONICSENSOREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='TouchSensorL' 
	{
        $current = grammarAccess.getSensorAccess().getTOUCHSENSORLEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSensorAccess().getTOUCHSENSORLEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='TouchSensorR' 
	{
        $current = grammarAccess.getSensorAccess().getTOUCHSENSORREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getSensorAccess().getTOUCHSENSORREnumLiteralDeclaration_4()); 
    }
));



// Rule EMotor
ruleEMotor returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='LeftMotor' 
	{
        $current = grammarAccess.getEMotorAccess().getLEFTMOTOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEMotorAccess().getLEFTMOTOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='RightMotor' 
	{
        $current = grammarAccess.getEMotorAccess().getRIGHTMOTOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEMotorAccess().getRIGHTMOTOREnumLiteralDeclaration_1()); 
    }
));



// Rule BBinaryOp
ruleBBinaryOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getBBinaryOpAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBBinaryOpAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='||' 
	{
        $current = grammarAccess.getBBinaryOpAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBBinaryOpAccess().getOREnumLiteralDeclaration_1()); 
    }
));



// Rule CompareOp
ruleCompareOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getCompareOpAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOpAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getCompareOpAccess().getNEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOpAccess().getNEQEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getCompareOpAccess().getGEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOpAccess().getGEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getCompareOpAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOpAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='<=' 
	{
        $current = grammarAccess.getCompareOpAccess().getLEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOpAccess().getLEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<' 
	{
        $current = grammarAccess.getCompareOpAccess().getLTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompareOpAccess().getLTEnumLiteralDeclaration_5()); 
    }
));



RULE_ALPHA : 'A'..'Z';

RULE_BOOL_LITERAL : ('True'|'False'|'TRUE'|'FALSE');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


