/*
 * generated by Xtext
 */
package mars.rover.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RoverDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBehaviorOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorOrderBehaviorNameParserRuleCall_1_0 = (RuleCall)cBehaviorOrderAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGlobalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGlobalsGlobalParserRuleCall_2_1_0 = (RuleCall)cGlobalsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConstantsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStaticsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStaticsStaticParserRuleCall_3_1_0 = (RuleCall)cStaticsAssignment_3_1.eContents().get(0);
		private final Keyword cStopsWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStopBehaviourAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStopBehaviourValueExpressionParserRuleCall_5_0 = (RuleCall)cStopBehaviourAssignment_5.eContents().get(0);
		private final Assignment cBehaviorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBehaviorsImplementationParserRuleCall_6_0 = (RuleCall)cBehaviorsAssignment_6.eContents().get(0);
		private final Assignment cSubRoutinesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSubRoutinesSubRoutineParserRuleCall_7_0 = (RuleCall)cSubRoutinesAssignment_7.eContents().get(0);
		
		//Robot:
		//	"Behaviors:" behaviorOrder+=BehaviorName+ ("Variables:" globals+=Global*)? ("Constants:" statics+=Static*)?
		//	"Stops when:" stopBehaviour=ValueExpression behaviors+=Implementation+ subRoutines+=SubRoutine*;
		@Override public ParserRule getRule() { return rule; }

		//"Behaviors:" behaviorOrder+=BehaviorName+ ("Variables:" globals+=Global*)? ("Constants:" statics+=Static*)?
		//"Stops when:" stopBehaviour=ValueExpression behaviors+=Implementation+ subRoutines+=SubRoutine*
		public Group getGroup() { return cGroup; }

		//"Behaviors:"
		public Keyword getBehaviorsKeyword_0() { return cBehaviorsKeyword_0; }

		//behaviorOrder+=BehaviorName+
		public Assignment getBehaviorOrderAssignment_1() { return cBehaviorOrderAssignment_1; }

		//BehaviorName
		public RuleCall getBehaviorOrderBehaviorNameParserRuleCall_1_0() { return cBehaviorOrderBehaviorNameParserRuleCall_1_0; }

		//("Variables:" globals+=Global*)?
		public Group getGroup_2() { return cGroup_2; }

		//"Variables:"
		public Keyword getVariablesKeyword_2_0() { return cVariablesKeyword_2_0; }

		//globals+=Global*
		public Assignment getGlobalsAssignment_2_1() { return cGlobalsAssignment_2_1; }

		//Global
		public RuleCall getGlobalsGlobalParserRuleCall_2_1_0() { return cGlobalsGlobalParserRuleCall_2_1_0; }

		//("Constants:" statics+=Static*)?
		public Group getGroup_3() { return cGroup_3; }

		//"Constants:"
		public Keyword getConstantsKeyword_3_0() { return cConstantsKeyword_3_0; }

		//statics+=Static*
		public Assignment getStaticsAssignment_3_1() { return cStaticsAssignment_3_1; }

		//Static
		public RuleCall getStaticsStaticParserRuleCall_3_1_0() { return cStaticsStaticParserRuleCall_3_1_0; }

		//"Stops when:"
		public Keyword getStopsWhenKeyword_4() { return cStopsWhenKeyword_4; }

		//stopBehaviour=ValueExpression
		public Assignment getStopBehaviourAssignment_5() { return cStopBehaviourAssignment_5; }

		//ValueExpression
		public RuleCall getStopBehaviourValueExpressionParserRuleCall_5_0() { return cStopBehaviourValueExpressionParserRuleCall_5_0; }

		//behaviors+=Implementation+
		public Assignment getBehaviorsAssignment_6() { return cBehaviorsAssignment_6; }

		//Implementation
		public RuleCall getBehaviorsImplementationParserRuleCall_6_0() { return cBehaviorsImplementationParserRuleCall_6_0; }

		//subRoutines+=SubRoutine*
		public Assignment getSubRoutinesAssignment_7() { return cSubRoutinesAssignment_7; }

		//SubRoutine
		public RuleCall getSubRoutinesSubRoutineParserRuleCall_7_0() { return cSubRoutinesSubRoutineParserRuleCall_7_0; }
	}

	public class BehaviorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//BehaviorName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class MotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Motor");
		private final Assignment cMAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMEMotorEnumRuleCall_0 = (RuleCall)cMAssignment.eContents().get(0);
		
		//Motor:
		//	m=EMotor;
		@Override public ParserRule getRule() { return rule; }

		//m=EMotor
		public Assignment getMAssignment() { return cMAssignment; }

		//EMotor
		public RuleCall getMEMotorEnumRuleCall_0() { return cMEMotorEnumRuleCall_0; }
	}

	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Global");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Global:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StaticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Static");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSpaceEqualsSignSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Static:
		//	name=ID " = " value=ValueExpression ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID " = " value=ValueExpression ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//" = "
		public Keyword getSpaceEqualsSignSpaceKeyword_1() { return cSpaceEqualsSignSpaceKeyword_1; }

		//value=ValueExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ValueExpression
		public RuleCall getValueValueExpressionParserRuleCall_2_0() { return cValueValueExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplementationForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cForAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cForBehaviorNameCrossReference_1_0 = (CrossReference)cForAssignment_1.eContents().get(0);
		private final RuleCall cForBehaviorNameIDTerminalRuleCall_1_0_1 = (RuleCall)cForBehaviorNameCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTakesControlWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cControlCheckAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cControlCheckValueExpressionParserRuleCall_4_0 = (RuleCall)cControlCheckAssignment_4.eContents().get(0);
		private final Keyword cDoesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionsExpressionParserRuleCall_6_0 = (RuleCall)cExpressionsAssignment_6.eContents().get(0);
		
		//Implementation:
		//	"Implementation for" for=[BehaviorName] ":" "Takes control when:" controlCheck=ValueExpression "Does:"
		//	expressions+=Expression+;
		@Override public ParserRule getRule() { return rule; }

		//"Implementation for" for=[BehaviorName] ":" "Takes control when:" controlCheck=ValueExpression "Does:"
		//expressions+=Expression+
		public Group getGroup() { return cGroup; }

		//"Implementation for"
		public Keyword getImplementationForKeyword_0() { return cImplementationForKeyword_0; }

		//for=[BehaviorName]
		public Assignment getForAssignment_1() { return cForAssignment_1; }

		//[BehaviorName]
		public CrossReference getForBehaviorNameCrossReference_1_0() { return cForBehaviorNameCrossReference_1_0; }

		//ID
		public RuleCall getForBehaviorNameIDTerminalRuleCall_1_0_1() { return cForBehaviorNameIDTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"Takes control when:"
		public Keyword getTakesControlWhenKeyword_3() { return cTakesControlWhenKeyword_3; }

		//controlCheck=ValueExpression
		public Assignment getControlCheckAssignment_4() { return cControlCheckAssignment_4; }

		//ValueExpression
		public RuleCall getControlCheckValueExpressionParserRuleCall_4_0() { return cControlCheckValueExpressionParserRuleCall_4_0; }

		//"Does:"
		public Keyword getDoesKeyword_5() { return cDoesKeyword_5; }

		//expressions+=Expression+
		public Assignment getExpressionsAssignment_6() { return cExpressionsAssignment_6; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_6_0() { return cExpressionsExpressionParserRuleCall_6_0; }
	}

	public class SubRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoutineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_0 = (RuleCall)cExpressionsAssignment_3.eContents().get(0);
		
		//SubRoutine:
		//	"Routine " name=ID ":" expressions+=Expression+;
		@Override public ParserRule getRule() { return rule; }

		//"Routine " name=ID ":" expressions+=Expression+
		public Group getGroup() { return cGroup; }

		//"Routine "
		public Keyword getRoutineKeyword_0() { return cRoutineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//expressions+=Expression+
		public Assignment getExpressionsAssignment_3() { return cExpressionsAssignment_3; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_0() { return cExpressionsExpressionParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cValExprParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cActionParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cAssignExpressionParserRuleCall_0_0_2 = (RuleCall)cAlternatives_0_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIFExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWHILEExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////| Var
		//Expression:
		//	(ValExpr | Action | AssignExpression) ";" | IFExpression | WHILEExpression;
		@Override public ParserRule getRule() { return rule; }

		//(ValExpr | Action | AssignExpression) ";" | IFExpression | WHILEExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//(ValExpr | Action | AssignExpression) ";"
		public Group getGroup_0() { return cGroup_0; }

		//ValExpr | Action | AssignExpression
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//ValExpr
		public RuleCall getValExprParserRuleCall_0_0_0() { return cValExprParserRuleCall_0_0_0; }

		//Action
		public RuleCall getActionParserRuleCall_0_0_1() { return cActionParserRuleCall_0_0_1; }

		//AssignExpression
		public RuleCall getAssignExpressionParserRuleCall_0_0_2() { return cAssignExpressionParserRuleCall_0_0_2; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//IFExpression
		public RuleCall getIFExpressionParserRuleCall_1() { return cIFExpressionParserRuleCall_1; }

		//WHILEExpression
		public RuleCall getWHILEExpressionParserRuleCall_2() { return cWHILEExpressionParserRuleCall_2; }
	}

	public class ValExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValExpr");
		private final Assignment cVExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVExprValueExpressionParserRuleCall_0 = (RuleCall)cVExprAssignment.eContents().get(0);
		
		//ValExpr:
		//	vExpr=ValueExpression;
		@Override public ParserRule getRule() { return rule; }

		//vExpr=ValueExpression
		public Assignment getVExprAssignment() { return cVExprAssignment; }

		//ValueExpression
		public RuleCall getVExprValueExpressionParserRuleCall_0() { return cVExprValueExpressionParserRuleCall_0; }
	}

	public class IFExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IFExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCValueExpressionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTExpressionParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cELSEKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEExpressionParserRuleCall_5_2_0 = (RuleCall)cEAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//IFExpression:
		//	"IF" c=ValueExpression "{" t+=Expression+ "}" ("ELSE" "{" e+=Expression+ "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"IF" c=ValueExpression "{" t+=Expression+ "}" ("ELSE" "{" e+=Expression+ "}")?
		public Group getGroup() { return cGroup; }

		//"IF"
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }

		//c=ValueExpression
		public Assignment getCAssignment_1() { return cCAssignment_1; }

		//ValueExpression
		public RuleCall getCValueExpressionParserRuleCall_1_0() { return cCValueExpressionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//t+=Expression+
		public Assignment getTAssignment_3() { return cTAssignment_3; }

		//Expression
		public RuleCall getTExpressionParserRuleCall_3_0() { return cTExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//("ELSE" "{" e+=Expression+ "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"ELSE"
		public Keyword getELSEKeyword_5_0() { return cELSEKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//e+=Expression+
		public Assignment getEAssignment_5_2() { return cEAssignment_5_2; }

		//Expression
		public RuleCall getEExpressionParserRuleCall_5_2_0() { return cEExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}

	public class WHILEExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WHILEExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHILEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCValueExpressionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBExpressionParserRuleCall_3_0 = (RuleCall)cBAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WHILEExpression:
		//	"WHILE" c=ValueExpression "{" b+=Expression+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"WHILE" c=ValueExpression "{" b+=Expression+ "}"
		public Group getGroup() { return cGroup; }

		//"WHILE"
		public Keyword getWHILEKeyword_0() { return cWHILEKeyword_0; }

		//c=ValueExpression
		public Assignment getCAssignment_1() { return cCAssignment_1; }

		//ValueExpression
		public RuleCall getCValueExpressionParserRuleCall_1_0() { return cCValueExpressionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//b+=Expression+
		public Assignment getBAssignment_3() { return cBAssignment_3; }

		//Expression
		public RuleCall getBExpressionParserRuleCall_3_0() { return cBExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AssignExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cGlobalGlobalCrossReference_0_0 = (CrossReference)cGlobalAssignment_0.eContents().get(0);
		private final RuleCall cGlobalGlobalIDTerminalRuleCall_0_0_1 = (RuleCall)cGlobalGlobalCrossReference_0_0.eContents().get(1);
		private final Keyword cSpaceEqualsSignSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVValueExpressionParserRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		
		//AssignExpression:
		//	global=[Global] " = " v=ValueExpression;
		@Override public ParserRule getRule() { return rule; }

		//global=[Global] " = " v=ValueExpression
		public Group getGroup() { return cGroup; }

		//global=[Global]
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }

		//[Global]
		public CrossReference getGlobalGlobalCrossReference_0_0() { return cGlobalGlobalCrossReference_0_0; }

		//ID
		public RuleCall getGlobalGlobalIDTerminalRuleCall_0_0_1() { return cGlobalGlobalIDTerminalRuleCall_0_0_1; }

		//" = "
		public Keyword getSpaceEqualsSignSpaceKeyword_1() { return cSpaceEqualsSignSpaceKeyword_1; }

		//v=ValueExpression
		public Assignment getVAssignment_2() { return cVAssignment_2; }

		//ValueExpression
		public RuleCall getVValueExpressionParserRuleCall_2_0() { return cVValueExpressionParserRuleCall_2_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForwardActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRotateActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStopActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSAccelerationActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSSpeedActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubRoutineActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMeasureActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cShowActionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSoundActionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFreeActionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		/// *Var :
		//	'VAR' name = ID ' = ' v = Expression
		//;* / Action:
		//	ForwardAction | RotateAction | StopAction | SAccelerationAction | SSpeedAction | SubRoutineAction | MeasureAction |
		//	ShowAction | SoundAction | FreeAction;
		@Override public ParserRule getRule() { return rule; }

		//ForwardAction | RotateAction | StopAction | SAccelerationAction | SSpeedAction | SubRoutineAction | MeasureAction |
		//ShowAction | SoundAction | FreeAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//ForwardAction
		public RuleCall getForwardActionParserRuleCall_0() { return cForwardActionParserRuleCall_0; }

		//RotateAction
		public RuleCall getRotateActionParserRuleCall_1() { return cRotateActionParserRuleCall_1; }

		//StopAction
		public RuleCall getStopActionParserRuleCall_2() { return cStopActionParserRuleCall_2; }

		//SAccelerationAction
		public RuleCall getSAccelerationActionParserRuleCall_3() { return cSAccelerationActionParserRuleCall_3; }

		//SSpeedAction
		public RuleCall getSSpeedActionParserRuleCall_4() { return cSSpeedActionParserRuleCall_4; }

		//SubRoutineAction
		public RuleCall getSubRoutineActionParserRuleCall_5() { return cSubRoutineActionParserRuleCall_5; }

		//MeasureAction
		public RuleCall getMeasureActionParserRuleCall_6() { return cMeasureActionParserRuleCall_6; }

		//ShowAction
		public RuleCall getShowActionParserRuleCall_7() { return cShowActionParserRuleCall_7; }

		//SoundAction
		public RuleCall getSoundActionParserRuleCall_8() { return cSoundActionParserRuleCall_8; }

		//FreeAction
		public RuleCall getFreeActionParserRuleCall_9() { return cFreeActionParserRuleCall_9; }
	}

	public class ForwardActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMotorMotorParserRuleCall_2_0 = (RuleCall)cMotorAssignment_2.eContents().get(0);
		
		//ForwardAction:
		//	{ForwardAction} "Forward" motor=Motor?;
		@Override public ParserRule getRule() { return rule; }

		//{ForwardAction} "Forward" motor=Motor?
		public Group getGroup() { return cGroup; }

		//{ForwardAction}
		public Action getForwardActionAction_0() { return cForwardActionAction_0; }

		//"Forward"
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }

		//motor=Motor?
		public Assignment getMotorAssignment_2() { return cMotorAssignment_2; }

		//Motor
		public RuleCall getMotorMotorParserRuleCall_2_0() { return cMotorMotorParserRuleCall_2_0; }
	}

	public class RotateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RotateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMotorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMotorMotorParserRuleCall_1_0 = (RuleCall)cMotorAssignment_1.eContents().get(0);
		private final Assignment cDegreesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDegreesValueExpressionParserRuleCall_2_0 = (RuleCall)cDegreesAssignment_2.eContents().get(0);
		private final Assignment cBlockingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cBlockingWaitKeyword_3_0 = (Keyword)cBlockingAssignment_3.eContents().get(0);
		
		//RotateAction:
		//	"Rotate" motor=Motor degrees=ValueExpression blocking?="wait"?;
		@Override public ParserRule getRule() { return rule; }

		//"Rotate" motor=Motor degrees=ValueExpression blocking?="wait"?
		public Group getGroup() { return cGroup; }

		//"Rotate"
		public Keyword getRotateKeyword_0() { return cRotateKeyword_0; }

		//motor=Motor
		public Assignment getMotorAssignment_1() { return cMotorAssignment_1; }

		//Motor
		public RuleCall getMotorMotorParserRuleCall_1_0() { return cMotorMotorParserRuleCall_1_0; }

		//degrees=ValueExpression
		public Assignment getDegreesAssignment_2() { return cDegreesAssignment_2; }

		//ValueExpression
		public RuleCall getDegreesValueExpressionParserRuleCall_2_0() { return cDegreesValueExpressionParserRuleCall_2_0; }

		//blocking?="wait"?
		public Assignment getBlockingAssignment_3() { return cBlockingAssignment_3; }

		//"wait"
		public Keyword getBlockingWaitKeyword_3_0() { return cBlockingWaitKeyword_3_0; }
	}

	public class StopActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StopAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMotorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMotorMotorParserRuleCall_2_0 = (RuleCall)cMotorAssignment_2.eContents().get(0);
		
		//StopAction:
		//	{StopAction} "Stop" motor=Motor?;
		@Override public ParserRule getRule() { return rule; }

		//{StopAction} "Stop" motor=Motor?
		public Group getGroup() { return cGroup; }

		//{StopAction}
		public Action getStopActionAction_0() { return cStopActionAction_0; }

		//"Stop"
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }

		//motor=Motor?
		public Assignment getMotorAssignment_2() { return cMotorAssignment_2; }

		//Motor
		public RuleCall getMotorMotorParserRuleCall_2_0() { return cMotorMotorParserRuleCall_2_0; }
	}

	public class SAccelerationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SAccelerationAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetAccelerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMotorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMotorMotorParserRuleCall_1_0 = (RuleCall)cMotorAssignment_1.eContents().get(0);
		private final Assignment cVAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVValueExpressionParserRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		
		//SAccelerationAction:
		//	"Set Acceleration" motor=Motor? v=ValueExpression;
		@Override public ParserRule getRule() { return rule; }

		//"Set Acceleration" motor=Motor? v=ValueExpression
		public Group getGroup() { return cGroup; }

		//"Set Acceleration"
		public Keyword getSetAccelerationKeyword_0() { return cSetAccelerationKeyword_0; }

		//motor=Motor?
		public Assignment getMotorAssignment_1() { return cMotorAssignment_1; }

		//Motor
		public RuleCall getMotorMotorParserRuleCall_1_0() { return cMotorMotorParserRuleCall_1_0; }

		//v=ValueExpression
		public Assignment getVAssignment_2() { return cVAssignment_2; }

		//ValueExpression
		public RuleCall getVValueExpressionParserRuleCall_2_0() { return cVValueExpressionParserRuleCall_2_0; }
	}

	public class SSpeedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SSpeedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMotorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMotorMotorParserRuleCall_1_0 = (RuleCall)cMotorAssignment_1.eContents().get(0);
		private final Assignment cVAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVValueExpressionParserRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		
		//SSpeedAction:
		//	"Set Speed" motor=Motor? v=ValueExpression;
		@Override public ParserRule getRule() { return rule; }

		//"Set Speed" motor=Motor? v=ValueExpression
		public Group getGroup() { return cGroup; }

		//"Set Speed"
		public Keyword getSetSpeedKeyword_0() { return cSetSpeedKeyword_0; }

		//motor=Motor?
		public Assignment getMotorAssignment_1() { return cMotorAssignment_1; }

		//Motor
		public RuleCall getMotorMotorParserRuleCall_1_0() { return cMotorMotorParserRuleCall_1_0; }

		//v=ValueExpression
		public Assignment getVAssignment_2() { return cVAssignment_2; }

		//ValueExpression
		public RuleCall getVValueExpressionParserRuleCall_2_0() { return cVValueExpressionParserRuleCall_2_0; }
	}

	public class SubRoutineActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubRoutineAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoutineAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoutineSubRoutineCrossReference_1_0 = (CrossReference)cRoutineAssignment_1.eContents().get(0);
		private final RuleCall cRoutineSubRoutineIDTerminalRuleCall_1_0_1 = (RuleCall)cRoutineSubRoutineCrossReference_1_0.eContents().get(1);
		
		//SubRoutineAction:
		//	"Do" routine=[SubRoutine];
		@Override public ParserRule getRule() { return rule; }

		//"Do" routine=[SubRoutine]
		public Group getGroup() { return cGroup; }

		//"Do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//routine=[SubRoutine]
		public Assignment getRoutineAssignment_1() { return cRoutineAssignment_1; }

		//[SubRoutine]
		public CrossReference getRoutineSubRoutineCrossReference_1_0() { return cRoutineSubRoutineCrossReference_1_0; }

		//ID
		public RuleCall getRoutineSubRoutineIDTerminalRuleCall_1_0_1() { return cRoutineSubRoutineIDTerminalRuleCall_1_0_1; }
	}

	public class MeasureActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasureAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeasureActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMeasureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MeasureAction:
		//	{MeasureAction} "Measure";
		@Override public ParserRule getRule() { return rule; }

		//{MeasureAction} "Measure"
		public Group getGroup() { return cGroup; }

		//{MeasureAction}
		public Action getMeasureActionAction_0() { return cMeasureActionAction_0; }

		//"Measure"
		public Keyword getMeasureKeyword_1() { return cMeasureKeyword_1; }
	}

	public class ShowActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cStringAssignment_1_0.eContents().get(0);
		private final Assignment cSensorAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSensorSensorEnumRuleCall_1_1_0 = (RuleCall)cSensorAssignment_1_1.eContents().get(0);
		
		//ShowAction:
		//	"Show" (string=STRING | sensor=Sensor);
		@Override public ParserRule getRule() { return rule; }

		//"Show" (string=STRING | sensor=Sensor)
		public Group getGroup() { return cGroup; }

		//"Show"
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }

		//string=STRING | sensor=Sensor
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//string=STRING
		public Assignment getStringAssignment_1_0() { return cStringAssignment_1_0; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0_0() { return cStringSTRINGTerminalRuleCall_1_0_0; }

		//sensor=Sensor
		public Assignment getSensorAssignment_1_1() { return cSensorAssignment_1_1; }

		//Sensor
		public RuleCall getSensorSensorEnumRuleCall_1_1_0() { return cSensorSensorEnumRuleCall_1_1_0; }
	}

	public class SoundActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SoundAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoundSoundEnumRuleCall_1_0 = (RuleCall)cSoundAssignment_1.eContents().get(0);
		
		//SoundAction:
		//	"Sound" sound=Sound;
		@Override public ParserRule getRule() { return rule; }

		//"Sound" sound=Sound
		public Group getGroup() { return cGroup; }

		//"Sound"
		public Keyword getSoundKeyword_0() { return cSoundKeyword_0; }

		//sound=Sound
		public Assignment getSoundAssignment_1() { return cSoundAssignment_1; }

		//Sound
		public RuleCall getSoundSoundEnumRuleCall_1_0() { return cSoundSoundEnumRuleCall_1_0; }
	}

	public class FreeActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreeAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMotorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMotorMotorParserRuleCall_1_0 = (RuleCall)cMotorAssignment_1.eContents().get(0);
		
		//FreeAction:
		//	"Free" motor=Motor;
		@Override public ParserRule getRule() { return rule; }

		//"Free" motor=Motor
		public Group getGroup() { return cGroup; }

		//"Free"
		public Keyword getFreeKeyword_0() { return cFreeKeyword_0; }

		//motor=Motor
		public Assignment getMotorAssignment_1() { return cMotorAssignment_1; }

		//Motor
		public RuleCall getMotorMotorParserRuleCall_1_0() { return cMotorMotorParserRuleCall_1_0; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final RuleCall cBlevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValueExpression:
		//	Blevel1;
		@Override public ParserRule getRule() { return rule; }

		//Blevel1
		public RuleCall getBlevel1ParserRuleCall() { return cBlevel1ParserRuleCall; }
	}

	public class Blevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Blevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBlevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinOpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBopBBinaryOpEnumRuleCall_1_1_0 = (RuleCall)cBopAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBlevel2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Blevel1 returns ValueExpression:
		//	Blevel2 ({ExpressionBinOp.left=current} bop=BBinaryOp right=Blevel2)*;
		@Override public ParserRule getRule() { return rule; }

		//Blevel2 ({ExpressionBinOp.left=current} bop=BBinaryOp right=Blevel2)*
		public Group getGroup() { return cGroup; }

		//Blevel2
		public RuleCall getBlevel2ParserRuleCall_0() { return cBlevel2ParserRuleCall_0; }

		//({ExpressionBinOp.left=current} bop=BBinaryOp right=Blevel2)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinOp.left=current}
		public Action getExpressionBinOpLeftAction_1_0() { return cExpressionBinOpLeftAction_1_0; }

		//bop=BBinaryOp
		public Assignment getBopAssignment_1_1() { return cBopAssignment_1_1; }

		//BBinaryOp
		public RuleCall getBopBBinaryOpEnumRuleCall_1_1_0() { return cBopBBinaryOpEnumRuleCall_1_1_0; }

		//right=Blevel2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Blevel2
		public RuleCall getRightBlevel2ParserRuleCall_1_2_0() { return cRightBlevel2ParserRuleCall_1_2_0; }
	}

	public class Blevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Blevel2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBNotExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlevel3ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Blevel2 returns ValueExpression:
		//	BNotExpr | Blevel3;
		@Override public ParserRule getRule() { return rule; }

		//BNotExpr | Blevel3
		public Alternatives getAlternatives() { return cAlternatives; }

		//BNotExpr
		public RuleCall getBNotExprParserRuleCall_0() { return cBNotExprParserRuleCall_0; }

		//Blevel3
		public RuleCall getBlevel3ParserRuleCall_1() { return cBlevel3ParserRuleCall_1; }
	}

	public class BNotExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BNotExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubBlevel3ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//BNotExpr:
		//	"NOT" sub=Blevel3;
		@Override public ParserRule getRule() { return rule; }

		//"NOT" sub=Blevel3
		public Group getGroup() { return cGroup; }

		//"NOT"
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }

		//sub=Blevel3
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }

		//Blevel3
		public RuleCall getSubBlevel3ParserRuleCall_1_0() { return cSubBlevel3ParserRuleCall_1_0; }
	}

	public class Blevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Blevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBlevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionBinCompLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBcompAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBcompCompareOpEnumRuleCall_1_1_0 = (RuleCall)cBcompAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBlevel4ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Blevel3 returns ValueExpression:
		//	Blevel4 ({ExpressionBinComp.left=current} bcomp=CompareOp right=Blevel4)*;
		@Override public ParserRule getRule() { return rule; }

		//Blevel4 ({ExpressionBinComp.left=current} bcomp=CompareOp right=Blevel4)*
		public Group getGroup() { return cGroup; }

		//Blevel4
		public RuleCall getBlevel4ParserRuleCall_0() { return cBlevel4ParserRuleCall_0; }

		//({ExpressionBinComp.left=current} bcomp=CompareOp right=Blevel4)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExpressionBinComp.left=current}
		public Action getExpressionBinCompLeftAction_1_0() { return cExpressionBinCompLeftAction_1_0; }

		//bcomp=CompareOp
		public Assignment getBcompAssignment_1_1() { return cBcompAssignment_1_1; }

		//CompareOp
		public RuleCall getBcompCompareOpEnumRuleCall_1_1_0() { return cBcompCompareOpEnumRuleCall_1_1_0; }

		//right=Blevel4
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Blevel4
		public RuleCall getRightBlevel4ParserRuleCall_1_2_0() { return cRightBlevel4ParserRuleCall_1_2_0; }
	}

	public class Blevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Blevel4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBVLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBBLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBVarLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBSensorLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBVBracketParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cColorLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Blevel4 returns ValueExpression:
		//	BVLiteral | BBLiteral | BVarLiteral | BSensorLiteral | BVBracket | ColorLiteral;
		@Override public ParserRule getRule() { return rule; }

		//BVLiteral | BBLiteral | BVarLiteral | BSensorLiteral | BVBracket | ColorLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BVLiteral
		public RuleCall getBVLiteralParserRuleCall_0() { return cBVLiteralParserRuleCall_0; }

		//BBLiteral
		public RuleCall getBBLiteralParserRuleCall_1() { return cBBLiteralParserRuleCall_1; }

		//BVarLiteral
		public RuleCall getBVarLiteralParserRuleCall_2() { return cBVarLiteralParserRuleCall_2; }

		//BSensorLiteral
		public RuleCall getBSensorLiteralParserRuleCall_3() { return cBSensorLiteralParserRuleCall_3; }

		//BVBracket
		public RuleCall getBVBracketParserRuleCall_4() { return cBVBracketParserRuleCall_4; }

		//ColorLiteral
		public RuleCall getColorLiteralParserRuleCall_5() { return cColorLiteralParserRuleCall_5; }
	}

	public class BVLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BVLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegNegKeyword_0_0 = (Keyword)cNegAssignment_0.eContents().get(0);
		private final Assignment cAValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAValueINTTerminalRuleCall_1_0 = (RuleCall)cAValueAssignment_1.eContents().get(0);
		
		////remove comment for fractional values
		////('/' fraction = INT)?;
		//BVLiteral:
		//	neg?="neg"? aValue=INT;
		@Override public ParserRule getRule() { return rule; }

		//neg?="neg"? aValue=INT
		public Group getGroup() { return cGroup; }

		//neg?="neg"?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//"neg"
		public Keyword getNegNegKeyword_0_0() { return cNegNegKeyword_0_0; }

		//aValue=INT
		public Assignment getAValueAssignment_1() { return cAValueAssignment_1; }

		//INT
		public RuleCall getAValueINTTerminalRuleCall_1_0() { return cAValueINTTerminalRuleCall_1_0; }
	}

	public class BBLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BBLiteral");
		private final Assignment cBValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBValueBOOL_LITERALTerminalRuleCall_0 = (RuleCall)cBValueAssignment.eContents().get(0);
		
		//BBLiteral:
		//	bValue=BOOL_LITERAL;
		@Override public ParserRule getRule() { return rule; }

		//bValue=BOOL_LITERAL
		public Assignment getBValueAssignment() { return cBValueAssignment; }

		//BOOL_LITERAL
		public RuleCall getBValueBOOL_LITERALTerminalRuleCall_0() { return cBValueBOOL_LITERALTerminalRuleCall_0; }
	}

	public class BVarLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BVarLiteral");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//BVarLiteral:
		//	var=ID;
		@Override public ParserRule getRule() { return rule; }

		//var=ID
		public Assignment getVarAssignment() { return cVarAssignment; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_0() { return cVarIDTerminalRuleCall_0; }
	}

	public class BSensorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BSensorLiteral");
		private final Assignment cSensorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSensorSensorEnumRuleCall_0 = (RuleCall)cSensorAssignment.eContents().get(0);
		
		//BSensorLiteral:
		//	sensor=Sensor;
		@Override public ParserRule getRule() { return rule; }

		//sensor=Sensor
		public Assignment getSensorAssignment() { return cSensorAssignment; }

		//Sensor
		public RuleCall getSensorSensorEnumRuleCall_0() { return cSensorSensorEnumRuleCall_0; }
	}

	public class BVBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BVBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBsubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBsubValueExpressionParserRuleCall_1_0 = (RuleCall)cBsubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BVBracket:
		//	"(" bsub=ValueExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" bsub=ValueExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//bsub=ValueExpression
		public Assignment getBsubAssignment_1() { return cBsubAssignment_1; }

		//ValueExpression
		public RuleCall getBsubValueExpressionParserRuleCall_1_0() { return cBsubValueExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ColorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorLiteral");
		private final Assignment cColorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColorColorEnumRuleCall_0 = (RuleCall)cColorAssignment.eContents().get(0);
		
		//ColorLiteral:
		//	color=Color;
		@Override public ParserRule getRule() { return rule; }

		//color=Color
		public Assignment getColorAssignment() { return cColorAssignment; }

		//Color
		public RuleCall getColorColorEnumRuleCall_0() { return cColorColorEnumRuleCall_0; }
	}
	
	
	public class SensorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOLORIDSENSOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOLORIDSENSORColorIDKeyword_0_0 = (Keyword)cCOLORIDSENSOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTLIGHTSENSOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLIGHTSENSORLeftLightKeyword_1_0 = (Keyword)cLEFTLIGHTSENSOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTLIGHTSENSOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTLIGHTSENSORRightLightKeyword_2_0 = (Keyword)cRIGHTLIGHTSENSOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFRONTULTRASONICSENSOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFRONTULTRASONICSENSORFrontUSKeyword_3_0 = (Keyword)cFRONTULTRASONICSENSOREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREARULTRASONICSENSOREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREARULTRASONICSENSORRearUSKeyword_4_0 = (Keyword)cREARULTRASONICSENSOREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTOUCHSENSORLEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTOUCHSENSORLLeftTouchKeyword_5_0 = (Keyword)cTOUCHSENSORLEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTOUCHSENSORREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTOUCHSENSORRRightTouchKeyword_6_0 = (Keyword)cTOUCHSENSORREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cANGLESENSOREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cANGLESENSORAngleKeyword_7_0 = (Keyword)cANGLESENSOREnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Sensor:
		//	COLORIDSENSOR="ColorID" | LEFTLIGHTSENSOR="LeftLight" | RIGHTLIGHTSENSOR="RightLight" |
		//	FRONTULTRASONICSENSOR="FrontUS" | REARULTRASONICSENSOR="RearUS" | TOUCHSENSORL="LeftTouch" | TOUCHSENSORR="RightTouch"
		//	| ANGLESENSOR="Angle";
		public EnumRule getRule() { return rule; }

		//COLORIDSENSOR="ColorID" | LEFTLIGHTSENSOR="LeftLight" | RIGHTLIGHTSENSOR="RightLight" | FRONTULTRASONICSENSOR="FrontUS"
		//| REARULTRASONICSENSOR="RearUS" | TOUCHSENSORL="LeftTouch" | TOUCHSENSORR="RightTouch" | ANGLESENSOR="Angle"
		public Alternatives getAlternatives() { return cAlternatives; }

		//COLORIDSENSOR="ColorID"
		public EnumLiteralDeclaration getCOLORIDSENSOREnumLiteralDeclaration_0() { return cCOLORIDSENSOREnumLiteralDeclaration_0; }

		//"ColorID"
		public Keyword getCOLORIDSENSORColorIDKeyword_0_0() { return cCOLORIDSENSORColorIDKeyword_0_0; }

		//LEFTLIGHTSENSOR="LeftLight"
		public EnumLiteralDeclaration getLEFTLIGHTSENSOREnumLiteralDeclaration_1() { return cLEFTLIGHTSENSOREnumLiteralDeclaration_1; }

		//"LeftLight"
		public Keyword getLEFTLIGHTSENSORLeftLightKeyword_1_0() { return cLEFTLIGHTSENSORLeftLightKeyword_1_0; }

		//RIGHTLIGHTSENSOR="RightLight"
		public EnumLiteralDeclaration getRIGHTLIGHTSENSOREnumLiteralDeclaration_2() { return cRIGHTLIGHTSENSOREnumLiteralDeclaration_2; }

		//"RightLight"
		public Keyword getRIGHTLIGHTSENSORRightLightKeyword_2_0() { return cRIGHTLIGHTSENSORRightLightKeyword_2_0; }

		//FRONTULTRASONICSENSOR="FrontUS"
		public EnumLiteralDeclaration getFRONTULTRASONICSENSOREnumLiteralDeclaration_3() { return cFRONTULTRASONICSENSOREnumLiteralDeclaration_3; }

		//"FrontUS"
		public Keyword getFRONTULTRASONICSENSORFrontUSKeyword_3_0() { return cFRONTULTRASONICSENSORFrontUSKeyword_3_0; }

		//REARULTRASONICSENSOR="RearUS"
		public EnumLiteralDeclaration getREARULTRASONICSENSOREnumLiteralDeclaration_4() { return cREARULTRASONICSENSOREnumLiteralDeclaration_4; }

		//"RearUS"
		public Keyword getREARULTRASONICSENSORRearUSKeyword_4_0() { return cREARULTRASONICSENSORRearUSKeyword_4_0; }

		//TOUCHSENSORL="LeftTouch"
		public EnumLiteralDeclaration getTOUCHSENSORLEnumLiteralDeclaration_5() { return cTOUCHSENSORLEnumLiteralDeclaration_5; }

		//"LeftTouch"
		public Keyword getTOUCHSENSORLLeftTouchKeyword_5_0() { return cTOUCHSENSORLLeftTouchKeyword_5_0; }

		//TOUCHSENSORR="RightTouch"
		public EnumLiteralDeclaration getTOUCHSENSORREnumLiteralDeclaration_6() { return cTOUCHSENSORREnumLiteralDeclaration_6; }

		//"RightTouch"
		public Keyword getTOUCHSENSORRRightTouchKeyword_6_0() { return cTOUCHSENSORRRightTouchKeyword_6_0; }

		//ANGLESENSOR="Angle"
		public EnumLiteralDeclaration getANGLESENSOREnumLiteralDeclaration_7() { return cANGLESENSOREnumLiteralDeclaration_7; }

		//"Angle"
		public Keyword getANGLESENSORAngleKeyword_7_0() { return cANGLESENSORAngleKeyword_7_0; }
	}

	public class EMotorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EMotor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTMOTOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTMOTORLeftMotorKeyword_0_0 = (Keyword)cLEFTMOTOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTMOTOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTMOTORRightMotorKeyword_1_0 = (Keyword)cRIGHTMOTOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EMotor:
		//	LEFTMOTOR="LeftMotor" | RIGHTMOTOR="RightMotor";
		public EnumRule getRule() { return rule; }

		//LEFTMOTOR="LeftMotor" | RIGHTMOTOR="RightMotor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFTMOTOR="LeftMotor"
		public EnumLiteralDeclaration getLEFTMOTOREnumLiteralDeclaration_0() { return cLEFTMOTOREnumLiteralDeclaration_0; }

		//"LeftMotor"
		public Keyword getLEFTMOTORLeftMotorKeyword_0_0() { return cLEFTMOTORLeftMotorKeyword_0_0; }

		//RIGHTMOTOR="RightMotor"
		public EnumLiteralDeclaration getRIGHTMOTOREnumLiteralDeclaration_1() { return cRIGHTMOTOREnumLiteralDeclaration_1; }

		//"RightMotor"
		public Keyword getRIGHTMOTORRightMotorKeyword_1_0() { return cRIGHTMOTORRightMotorKeyword_1_0; }
	}

	public class SoundElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Sound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBEEPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBEEPBeepKeyword_0_0 = (Keyword)cBEEPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBUZZEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBUZZBuzzKeyword_1_0 = (Keyword)cBUZZEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Sound:
		//	BEEP="Beep" | BUZZ="Buzz";
		public EnumRule getRule() { return rule; }

		//BEEP="Beep" | BUZZ="Buzz"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BEEP="Beep"
		public EnumLiteralDeclaration getBEEPEnumLiteralDeclaration_0() { return cBEEPEnumLiteralDeclaration_0; }

		//"Beep"
		public Keyword getBEEPBeepKeyword_0_0() { return cBEEPBeepKeyword_0_0; }

		//BUZZ="Buzz"
		public EnumLiteralDeclaration getBUZZEnumLiteralDeclaration_1() { return cBUZZEnumLiteralDeclaration_1; }

		//"Buzz"
		public Keyword getBUZZBuzzKeyword_1_0() { return cBUZZBuzzKeyword_1_0; }
	}

	public class BBinaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BBinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BBinaryOp:
		//	AND="&&" | OR="||";
		public EnumRule getRule() { return rule; }

		//AND="&&" | OR="||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_0_0() { return cANDAmpersandAmpersandKeyword_0_0; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_1_0() { return cORVerticalLineVerticalLineKeyword_1_0; }
	}

	public class CompareOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLTLessThanSignKeyword_5_0 = (Keyword)cLTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CompareOp:
		//	EQ="equals" | NEQ="!=" | GEQ=">=" | GT=">" | LEQ="<=" | LT="<";
		public EnumRule getRule() { return rule; }

		//EQ="equals" | NEQ="!=" | GEQ=">=" | GT=">" | LEQ="<=" | LT="<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="equals"
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"equals"
		public Keyword getEQEqualsKeyword_0_0() { return cEQEqualsKeyword_0_0; }

		//NEQ="!="
		public EnumLiteralDeclaration getNEQEnumLiteralDeclaration_1() { return cNEQEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNEQExclamationMarkEqualsSignKeyword_1_0() { return cNEQExclamationMarkEqualsSignKeyword_1_0; }

		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_2() { return cGEQEnumLiteralDeclaration_2; }

		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_2_0() { return cGEQGreaterThanSignEqualsSignKeyword_2_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }

		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_4() { return cLEQEnumLiteralDeclaration_4; }

		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_4_0() { return cLEQLessThanSignEqualsSignKeyword_4_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_5() { return cLTEnumLiteralDeclaration_5; }

		//"<"
		public Keyword getLTLessThanSignKeyword_5_0() { return cLTLessThanSignKeyword_5_0; }
	}

	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBLACKBLACKKeyword_0_0 = (Keyword)cBLACKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLUEBLUEKeyword_1_0 = (Keyword)cBLUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBROWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBROWNBROWNKeyword_2_0 = (Keyword)cBROWNEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCYANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCYANCYANKeyword_3_0 = (Keyword)cCYANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_GRAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDARK_GRAYDARKGRAYKeyword_4_0 = (Keyword)cDARK_GRAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGRAYGRAYKeyword_5_0 = (Keyword)cGRAYEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGREENGREENKeyword_6_0 = (Keyword)cGREENEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_GRAYEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLIGHT_GRAYLIGHTGRAYKeyword_7_0 = (Keyword)cLIGHT_GRAYEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cMAGENTAEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cMAGENTAMAGENTAKeyword_8_0 = (Keyword)cMAGENTAEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cORANGEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cORANGEORANGEKeyword_9_0 = (Keyword)cORANGEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPINKEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPINKPINKKeyword_10_0 = (Keyword)cPINKEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cREDREDKeyword_11_0 = (Keyword)cREDEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cWHITEWHITEKeyword_12_0 = (Keyword)cWHITEEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cYELLOWYELLOWKeyword_13_0 = (Keyword)cYELLOWEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum Color:
		//	BLACK | BLUE | BROWN | CYAN | DARK_GRAY="DARKGRAY" | GRAY | GREEN | LIGHT_GRAY="LIGHTGRAY" | MAGENTA | ORANGE | PINK |
		//	RED | WHITE | YELLOW;
		public EnumRule getRule() { return rule; }

		//BLACK | BLUE | BROWN | CYAN | DARK_GRAY="DARKGRAY" | GRAY | GREEN | LIGHT_GRAY="LIGHTGRAY" | MAGENTA | ORANGE | PINK |
		//RED | WHITE | YELLOW
		public Alternatives getAlternatives() { return cAlternatives; }

		//BLACK
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_0() { return cBLACKEnumLiteralDeclaration_0; }

		//"BLACK"
		public Keyword getBLACKBLACKKeyword_0_0() { return cBLACKBLACKKeyword_0_0; }

		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_1() { return cBLUEEnumLiteralDeclaration_1; }

		//"BLUE"
		public Keyword getBLUEBLUEKeyword_1_0() { return cBLUEBLUEKeyword_1_0; }

		//BROWN
		public EnumLiteralDeclaration getBROWNEnumLiteralDeclaration_2() { return cBROWNEnumLiteralDeclaration_2; }

		//"BROWN"
		public Keyword getBROWNBROWNKeyword_2_0() { return cBROWNBROWNKeyword_2_0; }

		//CYAN
		public EnumLiteralDeclaration getCYANEnumLiteralDeclaration_3() { return cCYANEnumLiteralDeclaration_3; }

		//"CYAN"
		public Keyword getCYANCYANKeyword_3_0() { return cCYANCYANKeyword_3_0; }

		//DARK_GRAY="DARKGRAY"
		public EnumLiteralDeclaration getDARK_GRAYEnumLiteralDeclaration_4() { return cDARK_GRAYEnumLiteralDeclaration_4; }

		//"DARKGRAY"
		public Keyword getDARK_GRAYDARKGRAYKeyword_4_0() { return cDARK_GRAYDARKGRAYKeyword_4_0; }

		//GRAY
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_5() { return cGRAYEnumLiteralDeclaration_5; }

		//"GRAY"
		public Keyword getGRAYGRAYKeyword_5_0() { return cGRAYGRAYKeyword_5_0; }

		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_6() { return cGREENEnumLiteralDeclaration_6; }

		//"GREEN"
		public Keyword getGREENGREENKeyword_6_0() { return cGREENGREENKeyword_6_0; }

		//LIGHT_GRAY="LIGHTGRAY"
		public EnumLiteralDeclaration getLIGHT_GRAYEnumLiteralDeclaration_7() { return cLIGHT_GRAYEnumLiteralDeclaration_7; }

		//"LIGHTGRAY"
		public Keyword getLIGHT_GRAYLIGHTGRAYKeyword_7_0() { return cLIGHT_GRAYLIGHTGRAYKeyword_7_0; }

		//MAGENTA
		public EnumLiteralDeclaration getMAGENTAEnumLiteralDeclaration_8() { return cMAGENTAEnumLiteralDeclaration_8; }

		//"MAGENTA"
		public Keyword getMAGENTAMAGENTAKeyword_8_0() { return cMAGENTAMAGENTAKeyword_8_0; }

		//ORANGE
		public EnumLiteralDeclaration getORANGEEnumLiteralDeclaration_9() { return cORANGEEnumLiteralDeclaration_9; }

		//"ORANGE"
		public Keyword getORANGEORANGEKeyword_9_0() { return cORANGEORANGEKeyword_9_0; }

		//PINK
		public EnumLiteralDeclaration getPINKEnumLiteralDeclaration_10() { return cPINKEnumLiteralDeclaration_10; }

		//"PINK"
		public Keyword getPINKPINKKeyword_10_0() { return cPINKPINKKeyword_10_0; }

		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_11() { return cREDEnumLiteralDeclaration_11; }

		//"RED"
		public Keyword getREDREDKeyword_11_0() { return cREDREDKeyword_11_0; }

		//WHITE
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_12() { return cWHITEEnumLiteralDeclaration_12; }

		//"WHITE"
		public Keyword getWHITEWHITEKeyword_12_0() { return cWHITEWHITEKeyword_12_0; }

		//YELLOW
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_13() { return cYELLOWEnumLiteralDeclaration_13; }

		//"YELLOW"
		public Keyword getYELLOWYELLOWKeyword_13_0() { return cYELLOWYELLOWKeyword_13_0; }
	}
	
	private final RobotElements pRobot;
	private final BehaviorNameElements pBehaviorName;
	private final SensorElements unknownRuleSensor;
	private final MotorElements pMotor;
	private final EMotorElements unknownRuleEMotor;
	private final SoundElements unknownRuleSound;
	private final GlobalElements pGlobal;
	private final StaticElements pStatic;
	private final ImplementationElements pImplementation;
	private final SubRoutineElements pSubRoutine;
	private final ExpressionElements pExpression;
	private final ValExprElements pValExpr;
	private final IFExpressionElements pIFExpression;
	private final WHILEExpressionElements pWHILEExpression;
	private final AssignExpressionElements pAssignExpression;
	private final ActionElements pAction;
	private final ForwardActionElements pForwardAction;
	private final RotateActionElements pRotateAction;
	private final StopActionElements pStopAction;
	private final SAccelerationActionElements pSAccelerationAction;
	private final SSpeedActionElements pSSpeedAction;
	private final SubRoutineActionElements pSubRoutineAction;
	private final MeasureActionElements pMeasureAction;
	private final ShowActionElements pShowAction;
	private final SoundActionElements pSoundAction;
	private final FreeActionElements pFreeAction;
	private final ValueExpressionElements pValueExpression;
	private final Blevel1Elements pBlevel1;
	private final Blevel2Elements pBlevel2;
	private final BNotExprElements pBNotExpr;
	private final Blevel3Elements pBlevel3;
	private final Blevel4Elements pBlevel4;
	private final BVLiteralElements pBVLiteral;
	private final BBLiteralElements pBBLiteral;
	private final BVarLiteralElements pBVarLiteral;
	private final BSensorLiteralElements pBSensorLiteral;
	private final BVBracketElements pBVBracket;
	private final ColorLiteralElements pColorLiteral;
	private final BBinaryOpElements unknownRuleBBinaryOp;
	private final CompareOpElements unknownRuleCompareOp;
	private final ColorElements unknownRuleColor;
	private final TerminalRule tALPHA;
	private final TerminalRule tBOOL_LITERAL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RoverDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pBehaviorName = new BehaviorNameElements();
		this.unknownRuleSensor = new SensorElements();
		this.pMotor = new MotorElements();
		this.unknownRuleEMotor = new EMotorElements();
		this.unknownRuleSound = new SoundElements();
		this.pGlobal = new GlobalElements();
		this.pStatic = new StaticElements();
		this.pImplementation = new ImplementationElements();
		this.pSubRoutine = new SubRoutineElements();
		this.pExpression = new ExpressionElements();
		this.pValExpr = new ValExprElements();
		this.pIFExpression = new IFExpressionElements();
		this.pWHILEExpression = new WHILEExpressionElements();
		this.pAssignExpression = new AssignExpressionElements();
		this.pAction = new ActionElements();
		this.pForwardAction = new ForwardActionElements();
		this.pRotateAction = new RotateActionElements();
		this.pStopAction = new StopActionElements();
		this.pSAccelerationAction = new SAccelerationActionElements();
		this.pSSpeedAction = new SSpeedActionElements();
		this.pSubRoutineAction = new SubRoutineActionElements();
		this.pMeasureAction = new MeasureActionElements();
		this.pShowAction = new ShowActionElements();
		this.pSoundAction = new SoundActionElements();
		this.pFreeAction = new FreeActionElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pBlevel1 = new Blevel1Elements();
		this.pBlevel2 = new Blevel2Elements();
		this.pBNotExpr = new BNotExprElements();
		this.pBlevel3 = new Blevel3Elements();
		this.pBlevel4 = new Blevel4Elements();
		this.pBVLiteral = new BVLiteralElements();
		this.pBBLiteral = new BBLiteralElements();
		this.pBVarLiteral = new BVarLiteralElements();
		this.pBSensorLiteral = new BSensorLiteralElements();
		this.pBVBracket = new BVBracketElements();
		this.pColorLiteral = new ColorLiteralElements();
		this.unknownRuleBBinaryOp = new BBinaryOpElements();
		this.unknownRuleCompareOp = new CompareOpElements();
		this.unknownRuleColor = new ColorElements();
		this.tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHA");
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mars.rover.RoverDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot:
	//	"Behaviors:" behaviorOrder+=BehaviorName+ ("Variables:" globals+=Global*)? ("Constants:" statics+=Static*)?
	//	"Stops when:" stopBehaviour=ValueExpression behaviors+=Implementation+ subRoutines+=SubRoutine*;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}

	//BehaviorName:
	//	name=ID;
	public BehaviorNameElements getBehaviorNameAccess() {
		return pBehaviorName;
	}
	
	public ParserRule getBehaviorNameRule() {
		return getBehaviorNameAccess().getRule();
	}

	//enum Sensor:
	//	COLORIDSENSOR="ColorID" | LEFTLIGHTSENSOR="LeftLight" | RIGHTLIGHTSENSOR="RightLight" |
	//	FRONTULTRASONICSENSOR="FrontUS" | REARULTRASONICSENSOR="RearUS" | TOUCHSENSORL="LeftTouch" | TOUCHSENSORR="RightTouch"
	//	| ANGLESENSOR="Angle";
	public SensorElements getSensorAccess() {
		return unknownRuleSensor;
	}
	
	public EnumRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//Motor:
	//	m=EMotor;
	public MotorElements getMotorAccess() {
		return pMotor;
	}
	
	public ParserRule getMotorRule() {
		return getMotorAccess().getRule();
	}

	//enum EMotor:
	//	LEFTMOTOR="LeftMotor" | RIGHTMOTOR="RightMotor";
	public EMotorElements getEMotorAccess() {
		return unknownRuleEMotor;
	}
	
	public EnumRule getEMotorRule() {
		return getEMotorAccess().getRule();
	}

	//enum Sound:
	//	BEEP="Beep" | BUZZ="Buzz";
	public SoundElements getSoundAccess() {
		return unknownRuleSound;
	}
	
	public EnumRule getSoundRule() {
		return getSoundAccess().getRule();
	}

	//Global:
	//	name=ID;
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}

	//Static:
	//	name=ID " = " value=ValueExpression ";";
	public StaticElements getStaticAccess() {
		return pStatic;
	}
	
	public ParserRule getStaticRule() {
		return getStaticAccess().getRule();
	}

	//Implementation:
	//	"Implementation for" for=[BehaviorName] ":" "Takes control when:" controlCheck=ValueExpression "Does:"
	//	expressions+=Expression+;
	public ImplementationElements getImplementationAccess() {
		return pImplementation;
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}

	//SubRoutine:
	//	"Routine " name=ID ":" expressions+=Expression+;
	public SubRoutineElements getSubRoutineAccess() {
		return pSubRoutine;
	}
	
	public ParserRule getSubRoutineRule() {
		return getSubRoutineAccess().getRule();
	}

	////| Var
	//Expression:
	//	(ValExpr | Action | AssignExpression) ";" | IFExpression | WHILEExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ValExpr:
	//	vExpr=ValueExpression;
	public ValExprElements getValExprAccess() {
		return pValExpr;
	}
	
	public ParserRule getValExprRule() {
		return getValExprAccess().getRule();
	}

	//IFExpression:
	//	"IF" c=ValueExpression "{" t+=Expression+ "}" ("ELSE" "{" e+=Expression+ "}")?;
	public IFExpressionElements getIFExpressionAccess() {
		return pIFExpression;
	}
	
	public ParserRule getIFExpressionRule() {
		return getIFExpressionAccess().getRule();
	}

	//WHILEExpression:
	//	"WHILE" c=ValueExpression "{" b+=Expression+ "}";
	public WHILEExpressionElements getWHILEExpressionAccess() {
		return pWHILEExpression;
	}
	
	public ParserRule getWHILEExpressionRule() {
		return getWHILEExpressionAccess().getRule();
	}

	//AssignExpression:
	//	global=[Global] " = " v=ValueExpression;
	public AssignExpressionElements getAssignExpressionAccess() {
		return pAssignExpression;
	}
	
	public ParserRule getAssignExpressionRule() {
		return getAssignExpressionAccess().getRule();
	}

	/// *Var :
	//	'VAR' name = ID ' = ' v = Expression
	//;* / Action:
	//	ForwardAction | RotateAction | StopAction | SAccelerationAction | SSpeedAction | SubRoutineAction | MeasureAction |
	//	ShowAction | SoundAction | FreeAction;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ForwardAction:
	//	{ForwardAction} "Forward" motor=Motor?;
	public ForwardActionElements getForwardActionAccess() {
		return pForwardAction;
	}
	
	public ParserRule getForwardActionRule() {
		return getForwardActionAccess().getRule();
	}

	//RotateAction:
	//	"Rotate" motor=Motor degrees=ValueExpression blocking?="wait"?;
	public RotateActionElements getRotateActionAccess() {
		return pRotateAction;
	}
	
	public ParserRule getRotateActionRule() {
		return getRotateActionAccess().getRule();
	}

	//StopAction:
	//	{StopAction} "Stop" motor=Motor?;
	public StopActionElements getStopActionAccess() {
		return pStopAction;
	}
	
	public ParserRule getStopActionRule() {
		return getStopActionAccess().getRule();
	}

	//SAccelerationAction:
	//	"Set Acceleration" motor=Motor? v=ValueExpression;
	public SAccelerationActionElements getSAccelerationActionAccess() {
		return pSAccelerationAction;
	}
	
	public ParserRule getSAccelerationActionRule() {
		return getSAccelerationActionAccess().getRule();
	}

	//SSpeedAction:
	//	"Set Speed" motor=Motor? v=ValueExpression;
	public SSpeedActionElements getSSpeedActionAccess() {
		return pSSpeedAction;
	}
	
	public ParserRule getSSpeedActionRule() {
		return getSSpeedActionAccess().getRule();
	}

	//SubRoutineAction:
	//	"Do" routine=[SubRoutine];
	public SubRoutineActionElements getSubRoutineActionAccess() {
		return pSubRoutineAction;
	}
	
	public ParserRule getSubRoutineActionRule() {
		return getSubRoutineActionAccess().getRule();
	}

	//MeasureAction:
	//	{MeasureAction} "Measure";
	public MeasureActionElements getMeasureActionAccess() {
		return pMeasureAction;
	}
	
	public ParserRule getMeasureActionRule() {
		return getMeasureActionAccess().getRule();
	}

	//ShowAction:
	//	"Show" (string=STRING | sensor=Sensor);
	public ShowActionElements getShowActionAccess() {
		return pShowAction;
	}
	
	public ParserRule getShowActionRule() {
		return getShowActionAccess().getRule();
	}

	//SoundAction:
	//	"Sound" sound=Sound;
	public SoundActionElements getSoundActionAccess() {
		return pSoundAction;
	}
	
	public ParserRule getSoundActionRule() {
		return getSoundActionAccess().getRule();
	}

	//FreeAction:
	//	"Free" motor=Motor;
	public FreeActionElements getFreeActionAccess() {
		return pFreeAction;
	}
	
	public ParserRule getFreeActionRule() {
		return getFreeActionAccess().getRule();
	}

	//ValueExpression:
	//	Blevel1;
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//Blevel1 returns ValueExpression:
	//	Blevel2 ({ExpressionBinOp.left=current} bop=BBinaryOp right=Blevel2)*;
	public Blevel1Elements getBlevel1Access() {
		return pBlevel1;
	}
	
	public ParserRule getBlevel1Rule() {
		return getBlevel1Access().getRule();
	}

	//Blevel2 returns ValueExpression:
	//	BNotExpr | Blevel3;
	public Blevel2Elements getBlevel2Access() {
		return pBlevel2;
	}
	
	public ParserRule getBlevel2Rule() {
		return getBlevel2Access().getRule();
	}

	//BNotExpr:
	//	"NOT" sub=Blevel3;
	public BNotExprElements getBNotExprAccess() {
		return pBNotExpr;
	}
	
	public ParserRule getBNotExprRule() {
		return getBNotExprAccess().getRule();
	}

	//Blevel3 returns ValueExpression:
	//	Blevel4 ({ExpressionBinComp.left=current} bcomp=CompareOp right=Blevel4)*;
	public Blevel3Elements getBlevel3Access() {
		return pBlevel3;
	}
	
	public ParserRule getBlevel3Rule() {
		return getBlevel3Access().getRule();
	}

	//Blevel4 returns ValueExpression:
	//	BVLiteral | BBLiteral | BVarLiteral | BSensorLiteral | BVBracket | ColorLiteral;
	public Blevel4Elements getBlevel4Access() {
		return pBlevel4;
	}
	
	public ParserRule getBlevel4Rule() {
		return getBlevel4Access().getRule();
	}

	////remove comment for fractional values
	////('/' fraction = INT)?;
	//BVLiteral:
	//	neg?="neg"? aValue=INT;
	public BVLiteralElements getBVLiteralAccess() {
		return pBVLiteral;
	}
	
	public ParserRule getBVLiteralRule() {
		return getBVLiteralAccess().getRule();
	}

	//BBLiteral:
	//	bValue=BOOL_LITERAL;
	public BBLiteralElements getBBLiteralAccess() {
		return pBBLiteral;
	}
	
	public ParserRule getBBLiteralRule() {
		return getBBLiteralAccess().getRule();
	}

	//BVarLiteral:
	//	var=ID;
	public BVarLiteralElements getBVarLiteralAccess() {
		return pBVarLiteral;
	}
	
	public ParserRule getBVarLiteralRule() {
		return getBVarLiteralAccess().getRule();
	}

	//BSensorLiteral:
	//	sensor=Sensor;
	public BSensorLiteralElements getBSensorLiteralAccess() {
		return pBSensorLiteral;
	}
	
	public ParserRule getBSensorLiteralRule() {
		return getBSensorLiteralAccess().getRule();
	}

	//BVBracket:
	//	"(" bsub=ValueExpression ")";
	public BVBracketElements getBVBracketAccess() {
		return pBVBracket;
	}
	
	public ParserRule getBVBracketRule() {
		return getBVBracketAccess().getRule();
	}

	//ColorLiteral:
	//	color=Color;
	public ColorLiteralElements getColorLiteralAccess() {
		return pColorLiteral;
	}
	
	public ParserRule getColorLiteralRule() {
		return getColorLiteralAccess().getRule();
	}

	//enum BBinaryOp:
	//	AND="&&" | OR="||";
	public BBinaryOpElements getBBinaryOpAccess() {
		return unknownRuleBBinaryOp;
	}
	
	public EnumRule getBBinaryOpRule() {
		return getBBinaryOpAccess().getRule();
	}

	//enum CompareOp:
	//	EQ="equals" | NEQ="!=" | GEQ=">=" | GT=">" | LEQ="<=" | LT="<";
	public CompareOpElements getCompareOpAccess() {
		return unknownRuleCompareOp;
	}
	
	public EnumRule getCompareOpRule() {
		return getCompareOpAccess().getRule();
	}

	//enum Color:
	//	BLACK | BLUE | BROWN | CYAN | DARK_GRAY="DARKGRAY" | GRAY | GREEN | LIGHT_GRAY="LIGHTGRAY" | MAGENTA | ORANGE | PINK |
	//	RED | WHITE | YELLOW;
	public ColorElements getColorAccess() {
		return unknownRuleColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}

	////terminals
	//terminal ALPHA:
	//	"A".."Z";
	public TerminalRule getALPHARule() {
		return tALPHA;
	} 

	/// * Arithmetic expressions are not necessary for now
	//ValueExpression : Alevel1;
	//
	//Alevel1 returns ValueExpression :
	//	Alevel2
	//	(( {ExpressionAdd.left = current} '+' right=Alevel2)
	//	 ( {ExpressionMinus.left = current} '-' right=Alevel2))*
	//;
	//
	//Alevel2 returns ValueExpression :
	//	Alevel3
	//	( ({ExpressionMultiply.left=current} "*" right=Alevel3)
	//	| ({ExpressionDivision.left=current} "/" right=Alevel3)
	//	)*
	//;
	//
	//Alevel3 returns ValueExpression :
	//	Alevel4
	//	( {ExpressionPow.left = current} '^' right=Alevel4)*
	//;
	//
	//Alevel4 returns ValueExpression :
	//	ANegate | Alevel5
	//;
	//
	//ANegate : 'neg' sub = Alevel5;
	//
	//Alevel5 returns ValueExpression :
	//	  value = INT
	//	| 'G' global = [Global]
	//	| 'L' var = [Var]
	//	| 'S' stat = [Static]
	//	| sensor = Sensor
	//	| '(' sub = ValueExpression ')'
	//;
	// * * / terminal BOOL_LITERAL returns ecore::EBoolean:
	//	"True" | "False" | "TRUE" | "FALSE";
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
