package mars.rover.generator;

import mars.rover.generator.ExpressionPrinter;
import mars.rover.generator.ValueExpressionPrinter;
import mars.rover.roverDSL.BehaviorName;
import mars.rover.roverDSL.Expression;
import mars.rover.roverDSL.Global;
import mars.rover.roverDSL.Implementation;
import mars.rover.roverDSL.Robot;
import mars.rover.roverDSL.Static;
import mars.rover.roverDSL.SubRoutine;
import mars.rover.roverDSL.ValueExpression;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class RobotGenerator {
  private static boolean suppressContext = false;
  
  public static boolean shouldSuppress() {
    return RobotGenerator.suppressContext;
  }
  
  public static CharSequence toJava(final Robot root) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import lejos.hardware.ev3.LocalEV3;");
    _builder.newLine();
    _builder.append("import lejos.utility.Delay;");
    _builder.newLine();
    _builder.append("import lejos.hardware.motor.EV3LargeRegulatedMotor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.port.MotorPort;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3ColorSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3TouchSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3UltrasonicSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.NXTLightSensor;");
    _builder.newLine();
    _builder.append("import lejos.robotics.SampleProvider;");
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Arbitrator;");
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Behavior;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Robot {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(MotorPort.A);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(MotorPort.D);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3TouchSensor touchLeftSensor = new EV3TouchSensor(LocalEV3.get().getPort(\"S1\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3TouchSensor touchRightSensor = new EV3TouchSensor(LocalEV3.get().getPort(\"S4\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3ColorSensor colorSensor = new EV3ColorSensor(LocalEV3.get().getPort(\"S2\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3UltrasonicSensor distanceSensor = new EV3UltrasonicSensor(LocalEV3.get().getPort(\"S3\"));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//CONSTANTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//generated from constant list");
    _builder.newLine();
    {
      EList<Static> _statics = root.getStatics();
      for(final Static constant : _statics) {
        _builder.append("    ");
        _builder.append("public static int ");
        String _name = constant.getName();
        _builder.append(_name, "    ");
        _builder.append(" = ");
        ValueExpression _value = constant.getValue();
        CharSequence _print = ValueExpressionPrinter.print(_value);
        _builder.append(_print, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//GLOBALS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//To implement quit");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static int _running = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//generated from globals list");
    _builder.newLine();
    {
      EList<Global> _globals = root.getGlobals();
      for(final Global gName : _globals) {
        _builder.append("    ");
        _builder.append("public static int ");
        String _name_1 = gName.getName();
        _builder.append(_name_1, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static SampleProvider color  \t\t= colorSensor.getColorIDMode();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static SampleProvider light  \t\t= colorSensor.getColorIDMode(); //TODO: change to light mode");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static SampleProvider touchL \t\t= touchLeftSensor.getTouchMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static SampleProvider touchR \t\t= touchRightSensor.getTouchMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static SampleProvider distance  \t= distanceSensor.getDistanceMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static float[] colorSensorSample \t= new float[color.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static float[] lightSensorSample \t= new float[light.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static float[] touchSensorLSample \t= new float[touchL.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static float[] touchSensorRSample\t= new float[touchR.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static float[] ultraSonicSensorSample = new float[distance.sampleSize()];");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Behavior[] bList = {");
    _builder.newLine();
    {
      EList<BehaviorName> _behaviorOrder = root.getBehaviorOrder();
      boolean _hasElements = false;
      for(final BehaviorName bName : _behaviorOrder) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t\t\t\t\t\t\t\t");
        }
        _builder.append("\t\t\t\t\t\t\t\t");
        _builder.append("new ");
        String _name_2 = bName.getName();
        _builder.append(_name_2, "\t\t\t\t\t\t\t\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t\t\t\t");
      }
    }
    _builder.append(",new DefaultQuitBehaviour_() ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Arbitrator ar = new Arbitrator(bList);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ar.start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void updateSensor(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchL.fetchSample(touchSensorLSample, 0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchR.fetchSample(touchSensorRSample, 0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distance.fetchSample(ultraSonicSensorSample, 0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("color.fetchSample(colorSensorSample, 0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//TODO: Update light sensor");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void init(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("leftMotor.rotateTo(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rightMotor.rotateTo(0);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int bToI(boolean b){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(b) return 1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elese return 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static boolean iToB(boolean i){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return i > 0;\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Generated list of subroutines");
    _builder.newLine();
    {
      EList<SubRoutine> _subRoutines = root.getSubRoutines();
      for(final SubRoutine routine : _subRoutines) {
        _builder.append("\t");
        _builder.append("public static void ");
        String _name_3 = routine.getName();
        _builder.append(_name_3, "\t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        EList<Expression> _expressions = routine.getExpressions();
        CharSequence _printExprList = ExpressionPrinter.printExprList(_expressions);
        _builder.append(_printExprList, "\t\t");
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public class QDefaultQuitBehaviour_ extends Behavior {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean takeControl() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Robot.iToB(");
    ValueExpression _stopBehaviour = root.getStopBehaviour();
    CharSequence _print_1 = ValueExpressionPrinter.print(_stopBehaviour);
    _builder.append(_print_1, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void action() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Robot._running = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void suppress() {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Generated behaviours");
    _builder.newLine();
    {
      EList<Implementation> _behaviors = root.getBehaviors();
      for(final Implementation impl : _behaviors) {
        _builder.append("public class ");
        BehaviorName _for = impl.getFor();
        String _name_4 = _for.getName();
        _builder.append(_name_4, "");
        _builder.append(" extends Behavior {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("private boolean _supressed = true;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public boolean takeControl() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Robot.updateSensor();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return \tRobot.iToB(Robot._running) &&");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("Robot.iToB(");
        ValueExpression _controlCheck = impl.getControlCheck();
        CharSequence _print_2 = ValueExpressionPrinter.print(_controlCheck);
        _builder.append(_print_2, "\t\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void action() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("_supressed = false;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Robot.updateSensor();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//TODO: update sensors more often?");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("// supressioncontext = ");
        _builder.append(RobotGenerator.suppressContext = true, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        EList<Expression> _expressions_1 = impl.getExpressions();
        CharSequence _printExprList_1 = ExpressionPrinter.printExprList(_expressions_1);
        _builder.append(_printExprList_1, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("// supressioncontext = ");
        _builder.append(RobotGenerator.suppressContext = false, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void suppress() {_supressed = true;}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
