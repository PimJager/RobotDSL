package mars.rover.generator;

import mars.rover.generator.ExpressionPrinter;
import mars.rover.generator.ValueExpressionPrinter;
import mars.rover.roverDSL.BehaviorName;
import mars.rover.roverDSL.Expression;
import mars.rover.roverDSL.Global;
import mars.rover.roverDSL.Implementation;
import mars.rover.roverDSL.Robot;
import mars.rover.roverDSL.Static;
import mars.rover.roverDSL.SubRoutine;
import mars.rover.roverDSL.ValueExpression;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class RobotGenerator {
  private static boolean suppressContext = false;
  
  public static boolean shouldSuppress() {
    return RobotGenerator.suppressContext;
  }
  
  public static CharSequence toJava(final Robot root) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.DataInputStream;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.hardware.Sound;");
    _builder.newLine();
    _builder.append("import lejos.hardware.ev3.LocalEV3;");
    _builder.newLine();
    _builder.append("import lejos.hardware.lcd.LCD;");
    _builder.newLine();
    _builder.append("import lejos.hardware.motor.EV3LargeRegulatedMotor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.port.MotorPort;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3GyroSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3UltrasonicSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.NXTLightSensor;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.BTConnector;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.append("import lejos.robotics.SampleProvider;");
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Arbitrator;");
    _builder.newLine();
    _builder.append("import lejos.robotics.subsumption.Behavior;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Robot {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static EV3LargeRegulatedMotor leftMotor \t= new EV3LargeRegulatedMotor(MotorPort.A);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(MotorPort.B);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3LargeRegulatedMotor mesMotor \t= new EV3LargeRegulatedMotor(MotorPort.C);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static NXTLightSensor leftLightSensor \t= new NXTLightSensor(LocalEV3.get().getPort(\"S1\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static NXTLightSensor rightLightSensor \t= new NXTLightSensor(LocalEV3.get().getPort(\"S2\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3UltrasonicSensor rearUSSensor \t= new EV3UltrasonicSensor(LocalEV3.get().getPort(\"S3\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static EV3GyroSensor gyroSensor\t\t\t= new EV3GyroSensor(LocalEV3.get().getPort(\"S4\"));");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//local sensor providers and samples");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static SampleProvider llsProvider  \t\t\t\t= Robot.leftLightSensor.getRedMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] leftLightSamples \t\t\t\t= new float[llsProvider.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static SampleProvider rlsProvider  \t\t\t\t= Robot.rightLightSensor.getRedMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] rightLightSamples \t\t\t\t= new float[rlsProvider.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static SampleProvider rearUSProvider \t\t \t= Robot.rearUSSensor.getDistanceMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] rearUSSamples \t\t\t\t\t= new float[rearUSProvider.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static SampleProvider gyroProvider \t\t\t\t= Robot.gyroSensor.getAngleAndRateMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static float[] gyroSamples \t\t\t\t\t\t= new float[gyroProvider.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//remote sensor values");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int frontUSSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int touchLeftSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int touchRightSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int colorSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int leftLightSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int rightLightSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int rearUSSample;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static int gyroSample;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//bluetooth");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static NXTConnection connection;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static DataInputStream btIn;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static SensorValues vals = new SensorValues();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Object valsLock = new Object();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String currentBehaviour = \"Setup\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//CONSTANTS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//generated from constant list");
    _builder.newLine();
    {
      EList<Static> _statics = root.getStatics();
      for(final Static constant : _statics) {
        _builder.append("    ");
        _builder.append("public static int ");
        String _name = constant.getName();
        _builder.append(_name, "    ");
        _builder.append(" = ");
        ValueExpression _value = constant.getValue();
        CharSequence _print = ValueExpressionPrinter.print(_value);
        _builder.append(_print, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//GLOBALS");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//To implement quit");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static int _running = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//generated from globals list");
    _builder.newLine();
    {
      EList<Global> _globals = root.getGlobals();
      for(final Global gName : _globals) {
        _builder.append("    ");
        _builder.append("public static int ");
        String _name_1 = gName.getName();
        _builder.append(_name_1, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Behavior[] bList = {");
    _builder.newLine();
    {
      EList<BehaviorName> _behaviorOrder = root.getBehaviorOrder();
      boolean _hasElements = false;
      for(final BehaviorName bName : _behaviorOrder) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t\t\t\t\t\t\t\t");
        }
        _builder.append("\t\t\t\t\t\t\t\t");
        _builder.append("new ");
        String _name_2 = bName.getName();
        _builder.append(_name_2, "\t\t\t\t\t\t\t\t");
        _builder.append("()");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t\t\t\t\t");
      }
    }
    _builder.append(",new DefaultQuitBehaviour() ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Arbitrator ar = new Arbitrator(bList);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ar.start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void updateSensors(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("llsProvider.fetchSample(leftLightSamples, 0);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("rlsProvider.fetchSample(rightLightSamples, 0);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("rearUSProvider.fetchSample(rearUSSamples, 0);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("gyroProvider.fetchSample(gyroSamples, 0);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("leftLightSample = (int) (leftLightSamples[0] * 100);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("rightLightSample = (int) (leftLightSamples[0] * 100);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("rearUSSample = (int) (rearUSSamples[0] * 100);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("gyroSample = (int) gyroSamples[0];");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("synchronized (valsLock) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("frontUSSample = (int) (vals.frontUS * 100);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("touchLeftSample = vals.touchLeft > 0.9 ? 1 : 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("touchRightSample = vals.touchRight > 0.9 ? 1 : 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("colorSample = (int) vals.color;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void init(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("btSetup();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("gyroSensor.reset();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("listener.start();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("updateLCD.start();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void btSetup(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("LCD.drawString(\"Connecting to brick2\", 0, 8);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("BTConnector connector = new BTConnector();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("connection = connector.waitForConnection(10000, NXTConnection.RAW);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("LCD.clear();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if(connection == null) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("LCD.drawString(\"CONNECTION CANCELLED!!!\", 0, 8);");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("Sound.buzz();");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("while(true) {}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("btIn = connection.openDataInputStream();");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("Sound.beep();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int normalise(int i){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static int normalise(boolean b){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(b) return 1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else return 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static boolean makeBool(int i){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return i > 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static boolean makeBool(boolean b){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static Thread updateLCD = new Thread(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("updateSensors();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"LeftL: \" + leftLightSample, 0, 0);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"RightL: \" + rightLightSample, 0, 1);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"RearUs: \" + rearUSSample, 0, 2);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"Gyro: \" + gyroSample, 0, 3);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"Touch L:\"+touchLeftSample+\" R:\"+touchRightSample, 0, 4);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"FrontUS: \" + frontUSSample, 0, 5);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"color:\" + colorSample, 0, 6);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(\"\" + Robot.normalise(_running), 0, 7);\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LCD.drawString(currentBehaviour, 1, 7);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Thread listener = new Thread(new Runnable() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("byte[] buffer = new byte[256]; //allows for 128char strings");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("byte b;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while ((b = btIn.readByte()) != \'\\n\') {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("buffer[i] = b;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("i++;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String rec = new String(buffer);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("synchronized (valsLock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("vals = SensorValues.fromString(rec);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(vals == null) Sound.buzz();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch(Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(true) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Generated list of subroutines");
    _builder.newLine();
    {
      EList<SubRoutine> _subRoutines = root.getSubRoutines();
      for(final SubRoutine routine : _subRoutines) {
        _builder.append("\t");
        _builder.append("public static void ");
        String _name_3 = routine.getName();
        _builder.append(_name_3, "\t");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        EList<Expression> _expressions = routine.getExpressions();
        CharSequence _printExprList = ExpressionPrinter.printExprList(_expressions);
        _builder.append(_printExprList, "\t\t");
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("class DefaultQuitBehaviour implements Behavior {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean takeControl() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Robot.makeBool(");
    ValueExpression _stopBehaviour = root.getStopBehaviour();
    CharSequence _print_1 = ValueExpressionPrinter.print(_stopBehaviour);
    _builder.append(_print_1, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void action() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Robot._running = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void suppress() {}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Generated behaviours");
    _builder.newLine();
    {
      EList<Implementation> _behaviors = root.getBehaviors();
      for(final Implementation impl : _behaviors) {
        _builder.append("class ");
        BehaviorName _for = impl.getFor();
        String _name_4 = _for.getName();
        _builder.append(_name_4, "");
        _builder.append(" implements Behavior {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("private boolean _supressed = true;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public boolean takeControl() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Robot.updateSensors();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return \tRobot.makeBool(Robot._running) &&");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("Robot.makeBool(");
        ValueExpression _controlCheck = impl.getControlCheck();
        CharSequence _print_2 = ValueExpressionPrinter.print(_controlCheck);
        _builder.append(_print_2, "\t\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void action() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("_supressed = false;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Robot.updateSensors();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Robot.currentBehaviour = \"");
        BehaviorName _for_1 = impl.getFor();
        String _name_5 = _for_1.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("// supressioncontext = ");
        _builder.append(RobotGenerator.suppressContext = true, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        EList<Expression> _expressions_1 = impl.getExpressions();
        CharSequence _printExprList_1 = ExpressionPrinter.printExprList(_expressions_1);
        _builder.append(_printExprList_1, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("// supressioncontext = ");
        _builder.append(RobotGenerator.suppressContext = false, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void suppress() {_supressed = true;}");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("class SensorValues {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("float touchLeft;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("float touchRight;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("float frontUS;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("float color;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static SensorValues fromString(String s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String[] parts = s.split(\";\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(parts.length < 4) return null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SensorValues ret = new SensorValues();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ret.touchLeft = Float.parseFloat(parts[0]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ret.touchRight = Float.parseFloat(parts[1]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ret.frontUS = Float.parseFloat(parts[2]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ret.color = Float.parseFloat(parts[3]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ret;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static String toString(SensorValues s){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int touchL = s.touchLeft > 0.9 ? 1 : 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int touchR = s.touchRight > 0.9 ? 1 : 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"\"+touchL+\";\"+touchR+\";\"+Float.toString(s.frontUS)+\";\"+Float.toString(s.color);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
