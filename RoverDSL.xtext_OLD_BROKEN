grammar mars.rover.RoverDSL with org.eclipse.xtext.common.Terminals

generate roverDSL "http://www.rover.mars/RoverDSL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Robot:
    'Behaviors:' behaviorOrder += BehaviorName+
    ('Globals:' globals += Global*)?
    ('Constants:' constants += Constant*)?
    ('Stops when') stop += Expression+
    behaviors += Implementation+
    subRoutines += SubRoutine*
;

BehaviorName : name = ID;

enum Sensor :
      COLORIDSENSOR = 'ColorIDSensor'
    | LIGHTSENSOR = 'LightSensor'
    | TOUCHSENSORL = 'TouchSensorL'
    | TOUCHSENSORR = 'TouchSensorR'
    | ULTRASONICSENSOR = 'UltraSonicSensor'
;

enum Motor :
	  LEFTMOTOR = 'LeftMotor'
	| RIGHTMOTOR = 'RightMotor'
	| BOTHMOTORS = 'BothMotors'
;

Global : name = ID;

Constant : name = ID ' = ' value = ArithmeticExpression ';';

Implementation :
	'Implementation for' for = [BehaviorName] ':'
	'Takes control when:'
	controlCheck += Expression+
	'Does:'
	expressions += Expression+
;

SubRoutine :
	'Routine ' name = ID ':'
	expressions += Expression+
;

Expression : 
	(((=> ArithmeticExpression)
	//| BooleanExpression
	| Action
	) ';')
	| 'IF' c=BooleanExpression '{' t+=Expression+ '}' ('ELSE' '{' e+=Expression+ '}')?
	| 'WHILE' c=BooleanExpression '{' b+=Expression+ '}'
	| Assignment
;

Assignment :
	name = ID ' = ' v = Expression //check if this is local or global in semantics
;

Action : {Action}
	  'Forward' (motor = Motor)? ('wait:' blocking = BooleanExpression)?
	| 'Rotate' motor = Motor degrees = ArithmeticExpression ('wait:' blocking = BooleanExpression)?
	| 'Stop' (motor = Motor)? ('wait:' blocking = BooleanExpression)?
	| 'Set Acceleration' motor = Motor v = ArithmeticExpression
	| 'Set Speed' motor = Motor v = ArithmeticExpression
	| 'Do' routine = [SubRoutine]
;

ArithmeticExpression : Alevel1;

Alevel1 returns ArithmeticExpression :
	Alevel2
	(( {ExpressionAdd.left = current} '+' right=Alevel2)
	 ( {ExpressionMinus.left = current} '-' right=Alevel2))*
;

Alevel2 returns ArithmeticExpression :
	Alevel3
	( ({ExpressionMultiply.left=current} "*" right=Alevel3)
	| ({ExpressionDivision.left=current} "/" right=Alevel3)
	)*
;

Alevel3 returns ArithmeticExpression :
	Alevel4
	( {ExpressionPow.left = current} '^' right=Alevel4)*
;

Alevel4 returns ArithmeticExpression :
	ANegate | Alevel5
;

ANegate : 'neg' sub = Alevel5;

Alevel5 returns ArithmeticExpression :
	  value = INT
	| (=> sensor = Sensor)
	| '(' sub = ArithmeticExpression ')'
	| var = ID //check that this a global, constant or variable in semantics
;

BooleanExpression :	Blevel1;

Blevel1 returns BooleanExpression:
	Blevel2 
	( {ExpressionBinOp.left = current} bop = BBinaryOp right=Blevel2)*
;

Blevel2 returns BooleanExpression :
	BNotExpr | Blevel3
;

BNotExpr : "NOT" sub = Blevel3;

Blevel3 returns BooleanExpression :
	  value = BOOL_LITERAL
	| (=> sensor = Sensor)
	| (=> BCompare)
	| '(' bsub = BooleanExpression ')'
	| var = ID //check that this a global, constant or local variable in semantics
;

BCompare returns BooleanExpression: left=ArithmeticExpression cop = CompareOp right=ArithmeticExpression;

enum BBinaryOp :
	AND = '&&' | OR = '||'
;
enum CompareOp :
	EQ = "==" | NEQ = "!=" | GEQ = ">=" | GT = ">" | LEQ = "<=" | LT = "<"
;

//terminals
terminal ALPHA : ('A'..'Z');
terminal BOOL_LITERAL returns ecore::EBoolean: 'True' | 'False' | 'TRUE' | 'FALSE' ;




















