Behaviors:
	DriveForward
	AvoidBlock
	DetectOutsideLine
	DetectCliff
	MeasureBlueLake
	MeasureRedLake
	MeasureGreenLake
	
Variables:
	doingSafety
	foundRed
	foundBlue
	foundGreen

Constants:
	LINE_TRESHOLD = 39;
	CLIFF_TRESHOLD = 6;
	BLOCK_TRESHOLD = 23;
	ROTATE_SPEED = 100;
	ROTATE_ACC = 6000;
	DEFAULT_SPEED = 300; 
	DEFAULT_ACC = 800; 

Stops when: foundRed && foundBlue && foundGreen

Implementation for DriveForward:
	Takes control when: NOT doingSafety
	Does:
		Do setDefaults;
		Forward;
		
Implementation for DetectOutsideLine:
	Takes control when: LeftLight > LINE_TRESHOLD || RightLight > LINE_TRESHOLD
	Does:
		doingSafety = True;
		Do beforeRatate;
		Do backup;
		Do backup;
		Do backup;
		Do turnLeft;
		doingSafety = False;
		
Implementation for DetectCliff:
	Takes control when: RearUS > CLIFF_TRESHOLD
	Does:
		doingSafety = True;
		Do beforeRatate;
		Do frontup;
		Do frontup;
		Do turnLeft;
		doingSafety = False;
		
Implementation for MeasureBlueLake:
	Takes control when: ColorID equals BLUE && NOT foundBlue
	Does:
		Do beforeRatate;
		Measure;
		Show "Blue lake found!";
		Sound Beep;
		foundBlue = True;
		Do backup;
		Do turnLeft;
		
Implementation for MeasureRedLake:
	Takes control when: ColorID equals RED && NOT foundRed
	Does:
		Do beforeRatate;
		Measure;
		Show "Red lake found!";
		Sound Beep;
		foundRed = True;
		Do backup;
		Do turnLeft;
		
Implementation for MeasureGreenLake:
	Takes control when: ColorID equals GREEN && NOT foundGreen
	Does:
		Do beforeRatate;
		Measure;
		Show "Green lake found!";
		Sound Beep;
		foundGreen = True;
		Do backup;
		Do turnLeft;
		
Implementation for AvoidBlock:
	Takes control when: FrontUS < BLOCK_TRESHOLD || LeftTouch || RightTouch
	Does:
		doingSafety = True;
		Do beforeRatate;
		Do backup;
		Do turnLeft;
		doingSafety = False;

Routine turnLeft:
	Rotate LeftMotor neg 130;
	Rotate RightMotor 130 wait;

Routine backup:
	Rotate LeftMotor neg 100;
	Rotate RightMotor neg 100 wait;	
	
Routine frontup:
	Rotate LeftMotor 100;
	Rotate RightMotor 100 wait;
			
Routine beforeRatate:
	Set Acceleration ROTATE_ACC;
	Stop;
	Set Speed ROTATE_SPEED;
	
Routine setDefaults:
	Set Speed DEFAULT_SPEED;
	Set Acceleration DEFAULT_ACC;